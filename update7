#include <DmxSimple.h>
#include <SerialMP3Player.h>
#include <Adafruit_NeoPixel.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <CuteBuzzerSounds.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Encoder.h> // Include your encoder library
#include <Ethernet.h>
#include <Adafruit_ST7735.h>
#include <SdFat.h>
#include <SPI.h>

#define SMOKE_MACHINE_CHANNEL 1  // DMX channel for the smoke machine

// Standard hardware SPI pins
#define MOSI_PIN 51  // Example for Arduino Uno/Nano
#define SCLK_PIN 52  // Example for Arduino Uno/Nano

#define TFT_CS    5  // Chip Select for TFT
#define TFT_DC    6  // Data/Command for TFT
#define TFT_RST   7  // Reset for TFT
#define TFT_BACKLIGHT_PIN 44  // Connect the TFT LED pin to a PWM pin

#define SD_CS     37  // Chip Select for SD card
#define ETHERNET_CS 10  // Chip Select for Ethernet module
// Use SdFat instance
SdFat sd;

// Initialize TFT display (using software SPI)
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

// MAC address of the Arduino Ethernet shield
byte mac[] = { 0xD4, 0x3D, 0x7E, 0x03, 0x37, 0x33 };
// Static IP address for the Arduino
IPAddress ip(192, 168, 1, 177);
// PC IP address (used to communicate with Arduino)
IPAddress pcIp(192, 168, 1, 100);
// Subnet mask
IPAddress subnet(255, 255, 255, 0);

// Ethernet server on port 80
EthernetServer server(80);

// Display configurations
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

// timing and/or for scrolling text
const String message = "SHOWDUINO- 1.9 - Toby Brandon             ";  // Message to scroll
const unsigned long scrollInterval = 250;                             // Scroll speed (milliseconds)
const unsigned long scrollDuration = 5000;                            // Total time to scroll (10 seconds)
int scrollPosition = 0;


// oled logos an display
// attraction logo
static const unsigned char PROGMEM image_data_chamber_logo[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xbf, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb9, 0xfe, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xe8, 0xfc, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0x1e, 0x7f, 0xff, 0xff, 0xf6, 0xfe, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0x1c, 0x3f, 0xcf, 0xff, 0xe0, 0x7e, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xf9, 0x1e, 0x3f, 0xff, 0x1e, 0x7f, 0xdc, 0xf6, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xc1, 0x82, 0x3f, 0xff, 0x1e, 0x7f, 0xd9, 0xff, 0x80, 0x1e, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0x8d, 0xa0, 0x3f, 0xff, 0x1e, 0x00, 0xd8, 0xe6, 0x06, 0x06, 0x00, 0x3f, 0xff, 0xff,
  0xfe, 0x66, 0x30, 0x0c, 0x1e, 0x1f, 0x1e, 0x00, 0x1f, 0x7d, 0xef, 0xbc, 0x00, 0x00, 0x0f, 0xff,
  0xfc, 0x8a, 0x40, 0x86, 0x18, 0x01, 0x1e, 0x00, 0x1f, 0x3f, 0xcf, 0xff, 0x00, 0x1f, 0xc7, 0xff,
  0xfd, 0x24, 0x01, 0x80, 0x00, 0x00, 0x1c, 0x00, 0x3f, 0x3f, 0xfc, 0xff, 0x00, 0x0f, 0xf1, 0xff,
  0xfd, 0x88, 0xe1, 0xd6, 0x00, 0x00, 0x18, 0x00, 0x3e, 0x3f, 0xf8, 0xfc, 0x00, 0x0f, 0xd9, 0xff,
  0xff, 0x04, 0x74, 0x06, 0x00, 0x00, 0x00, 0x00, 0x30, 0x3e, 0x00, 0x08, 0x00, 0x20, 0x09, 0xff,
  0xff, 0xc0, 0x61, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xff,
  0xff, 0x80, 0x3a, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xff,
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xff,
  0xff, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x20, 0x00, 0x80, 0x00, 0x05, 0x07, 0xff,
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x84, 0x39, 0x3c, 0x84, 0xc0, 0x00, 0x1f, 0xff,
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x44, 0x08, 0xaa, 0xa8, 0x00, 0x03, 0xff, 0xff,
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x04, 0x09, 0xaa, 0xc8, 0x00, 0x01, 0x7f, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x82, 0x2b, 0xa2, 0xc8, 0x80, 0x00, 0x3f, 0xff,
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9f, 0xff,
  0xff, 0xff, 0xc0, 0x3e, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x4f, 0xff,
  0xff, 0xff, 0x81, 0xf8, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x2f, 0xff,
  0xff, 0xff, 0x81, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x7f, 0xd7, 0xff,
  0xff, 0xff, 0x80, 0xff, 0xf9, 0x81, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0xff,
  0xff, 0xff, 0x81, 0xff, 0xfe, 0x81, 0x00, 0x00, 0x00, 0x48, 0x10, 0x00, 0x03, 0xf8, 0x81, 0x7f,
  0xff, 0xff, 0xb0, 0xff, 0xff, 0x40, 0x00, 0x01, 0x3f, 0xe8, 0x03, 0x80, 0x07, 0xe0, 0x10, 0xff,
  0xff, 0xff, 0xb0, 0x7f, 0xff, 0x80, 0x00, 0x03, 0xff, 0xf8, 0x01, 0x80, 0x1f, 0xc0, 0x1f, 0xff,
  0xff, 0xff, 0x80, 0x3f, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xfe, 0xe6, 0x00, 0x3f, 0xe0, 0x7f, 0xff,
  0xff, 0xff, 0x20, 0x7f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x9c, 0xff, 0xe0, 0xff, 0xff,
  0xff, 0xff, 0x01, 0x7f, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xe0, 0xff, 0xff,
  0xff, 0xff, 0x83, 0x7f, 0xfd, 0xf7, 0xff, 0xf7, 0xff, 0xfe, 0xff, 0x82, 0xff, 0xf9, 0xff, 0xff,
  0xff, 0xff, 0x84, 0x3f, 0xfd, 0xf3, 0xff, 0xf7, 0xff, 0xfe, 0x7f, 0x82, 0x7f, 0xf9, 0xff, 0xff,
  0xff, 0xff, 0xce, 0x30, 0xf8, 0xc0, 0xa6, 0x22, 0xb1, 0x9e, 0x47, 0xce, 0x81, 0x89, 0xff, 0xff,
  0xff, 0xff, 0xce, 0x10, 0xf0, 0xc0, 0x42, 0x16, 0x92, 0x0e, 0x47, 0xce, 0x15, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xce, 0x90, 0xf4, 0x02, 0x4e, 0x16, 0x93, 0x3e, 0x57, 0xce, 0x15, 0x37, 0xff, 0xff,
  0xff, 0xff, 0xec, 0x80, 0xf6, 0x42, 0x42, 0x12, 0x93, 0x0e, 0x47, 0xce, 0x15, 0x87, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// emergency stop logo
static const unsigned char PROGMEM image_data_stop[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
  0x04, 0x3f, 0x80, 0xff, 0x80, 0x7f, 0xc0, 0x7f, 0xe0, 0x3f, 0xe0, 0x1f, 0xf0, 0x1f, 0xf0, 0x20,
  0x04, 0x7e, 0x01, 0xff, 0x01, 0xff, 0x00, 0xff, 0x80, 0xff, 0x80, 0x7f, 0xc0, 0x7f, 0xe0, 0x20,
  0x04, 0x78, 0x07, 0xfc, 0x03, 0xfe, 0x03, 0xfe, 0x03, 0xff, 0x01, 0xff, 0x00, 0xff, 0x80, 0x20,
  0x04, 0x70, 0x1f, 0xf0, 0x0f, 0xf8, 0x0f, 0xf8, 0x07, 0xfc, 0x07, 0xfc, 0x03, 0xfe, 0x00, 0x20,
  0x04, 0x40, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x06, 0x20,
  0x04, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x20,
  0x04, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x20,
  0x04, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x20,
  0x04, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x20,
  0x04, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x20,
  0x04, 0x7f, 0x01, 0xf9, 0xc3, 0x3f, 0x9f, 0x83, 0xc3, 0xf9, 0x86, 0x3c, 0x60, 0xc7, 0xe0, 0x20,
  0x04, 0x7c, 0x01, 0xfd, 0xc3, 0x3f, 0x9f, 0xc7, 0xf3, 0xf9, 0xc6, 0x7f, 0x71, 0x87, 0xc0, 0x20,
  0x04, 0x78, 0x01, 0x01, 0xe7, 0x30, 0x18, 0xce, 0x33, 0x01, 0xc6, 0xe3, 0x33, 0x87, 0x00, 0x20,
  0x04, 0x60, 0x21, 0x81, 0xe7, 0x30, 0x18, 0xcc, 0x03, 0x01, 0xe6, 0xc0, 0x1f, 0x04, 0x02, 0x20,
  0x04, 0x00, 0x61, 0xf9, 0xef, 0x3f, 0x9f, 0xd8, 0xfb, 0xf9, 0xf6, 0xc0, 0x0e, 0x00, 0x0e, 0x20,
  0x04, 0x01, 0xe1, 0x81, 0xff, 0x30, 0x1f, 0xdc, 0xfb, 0x81, 0xbe, 0xc0, 0x0e, 0x00, 0x3e, 0x20,
  0x04, 0x07, 0xe1, 0x01, 0xbf, 0x30, 0x18, 0xcc, 0x1b, 0x01, 0x9e, 0xc3, 0x0c, 0x00, 0xfe, 0x20,
  0x04, 0x1f, 0xe1, 0xfd, 0xbb, 0x3f, 0x98, 0xcf, 0xfb, 0xf9, 0x9e, 0xff, 0x0c, 0x01, 0xfe, 0x20,
  0x04, 0x3f, 0xe1, 0xfd, 0x9b, 0x3f, 0xd8, 0x67, 0xfb, 0xf9, 0x8e, 0x7e, 0x0c, 0x07, 0xfc, 0x20,
  0x04, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x20,
  0x04, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x20,
  0x04, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x20,
  0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x20,
  0x04, 0x40, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x20,
  0x04, 0x00, 0xe0, 0x0f, 0xfc, 0x1f, 0xff, 0xf8, 0x0f, 0xfc, 0x03, 0xff, 0xe0, 0x00, 0x1e, 0x20,
  0x04, 0x03, 0xe0, 0x3f, 0xff, 0x1f, 0xff, 0xf8, 0x3f, 0xff, 0x03, 0xff, 0xf8, 0x00, 0x3e, 0x20,
  0x04, 0x0f, 0xe0, 0x7f, 0xff, 0x9f, 0xff, 0xf8, 0xff, 0xff, 0x83, 0xff, 0xfc, 0x00, 0xfe, 0x20,
  0x04, 0x3f, 0xe0, 0x7c, 0x0f, 0x80, 0x3e, 0x00, 0xf8, 0x07, 0xc3, 0xc0, 0x3e, 0x03, 0xfe, 0x20,
  0x04, 0x7f, 0xc0, 0x7c, 0x07, 0xc0, 0x3e, 0x01, 0xf0, 0x03, 0xe3, 0xc0, 0x3e, 0x07, 0xf8, 0x20,
  0x04, 0x7f, 0x00, 0x7f, 0xe0, 0x00, 0x3e, 0x03, 0xe0, 0x03, 0xe3, 0xc0, 0x3e, 0x07, 0xf0, 0x20,
  0x04, 0x7c, 0x00, 0x3f, 0xfe, 0x00, 0x3e, 0x03, 0xe0, 0x01, 0xf3, 0xff, 0xfc, 0x07, 0xc0, 0x20,
  0x04, 0x78, 0x00, 0x07, 0xff, 0x80, 0x3e, 0x03, 0xe0, 0x01, 0xf3, 0xff, 0xf8, 0x07, 0x00, 0x20,
  0x04, 0x60, 0x20, 0x00, 0x1f, 0xc0, 0x3e, 0x03, 0xe0, 0x03, 0xe3, 0xff, 0xc0, 0x04, 0x02, 0x20,
  0x04, 0x00, 0x60, 0xf8, 0x07, 0xc0, 0x3e, 0x01, 0xf0, 0x03, 0xe3, 0xc0, 0x00, 0x00, 0x0e, 0x20,
  0x04, 0x01, 0xe0, 0xfc, 0x07, 0xc0, 0x3e, 0x00, 0xf8, 0x07, 0xc3, 0xc0, 0x00, 0x00, 0x3e, 0x20,
  0x04, 0x07, 0xe0, 0x7f, 0xff, 0x80, 0x3e, 0x00, 0x7f, 0xff, 0x83, 0xc0, 0x00, 0x00, 0x7e, 0x20,
  0x04, 0x0f, 0xe0, 0x3f, 0xff, 0x00, 0x3e, 0x00, 0x3f, 0xff, 0x03, 0xc0, 0x00, 0x01, 0xfe, 0x20,
  0x04, 0x3f, 0xe0, 0x07, 0xfc, 0x00, 0x3e, 0x00, 0x07, 0xf8, 0x03, 0xc0, 0x00, 0x07, 0xfc, 0x20,
  0x04, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x20,
  0x04, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x20,
  0x04, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x20,
  0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x20,
  0x04, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x20,
  0x04, 0x00, 0xff, 0x80, 0x7f, 0x80, 0x7f, 0xc0, 0x3f, 0xc0, 0x3f, 0xe0, 0x1f, 0xf0, 0x1e, 0x20,
  0x04, 0x03, 0xfe, 0x01, 0xff, 0x01, 0xff, 0x00, 0xff, 0x80, 0xff, 0xc0, 0x7f, 0xc0, 0x3e, 0x20,
  0x04, 0x0f, 0xf8, 0x07, 0xfc, 0x03, 0xfe, 0x03, 0xfe, 0x01, 0xff, 0x01, 0xff, 0x00, 0xfe, 0x20,
  0x04, 0x1f, 0xf0, 0x1f, 0xf0, 0x0f, 0xf8, 0x0f, 0xf8, 0x07, 0xfc, 0x03, 0xfe, 0x03, 0xfc, 0x20,
  0x02, 0x0f, 0xc0, 0x3f, 0xc0, 0x1f, 0xe0, 0x1f, 0xf0, 0x0f, 0xf0, 0x0f, 0xf8, 0x07, 0xf0, 0x40,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x40, 0x01, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'reset' logo
const unsigned char PROGMEM image_data_reset[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff,
  0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xff,
  0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff,
  0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff,
  0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff,
  0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff,
  0xff, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff,
  0xff, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff,
  0xfe, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff,
  0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff,
  0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff,
  0xe0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff,
  0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x07,
  0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x0f,
  0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f,
  0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x7f,
  0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0xff,
  0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x03, 0xff,
  0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff,
  0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1f, 0xff,
  0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff,
  0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff,
  0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff,
  0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'settings logo',
const unsigned char PROGMEM image_data_settings[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0f, 0xe0, 0x30, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0xff, 0xc0, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x07, 0xff, 0xc0, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x07, 0xff, 0xc0, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0xff, 0xc0, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x3f, 0xe0, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0xfc, 0x0e, 0x1f, 0xf0, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x8f, 0xfe, 0x3f, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x3e, 0x1f, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x07, 0xff, 0x18, 0x0f, 0xe0, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x03, 0xff, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x01, 0xff, 0x80, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x01, 0xff, 0xf8, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0xff, 0xfc, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x03, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'Scene 1', 128x68px
const unsigned char PROGMEM image_data_Scene1[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0x80, 0x07, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x07,
  0xfe, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x03,
  0xf8, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x03,
  0xf0, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x3c, 0x00, 0x0f, 0xf0, 0x3f, 0xc0, 0xff, 0xe0, 0x3f, 0xc0, 0x00, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x1f, 0xc0, 0x3e, 0x30, 0x79, 0xf0, 0xf9, 0xe0, 0xfb, 0xe0, 0x00, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x07, 0xfc, 0x38, 0x00, 0xf9, 0xf0, 0xe0, 0xf1, 0xf1, 0xe0, 0x00, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x3e, 0x78, 0x00, 0xff, 0xe0, 0xe0, 0xf1, 0xff, 0xe0, 0x00, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1e, 0x3c, 0x00, 0xf8, 0x00, 0xe0, 0xf1, 0xf0, 0x00, 0x00, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x3f, 0x7c, 0x3f, 0x78, 0x7d, 0xe0, 0xe0, 0xf0, 0xf9, 0xc0, 0x03, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x0f, 0xf8, 0x0f, 0xf0, 0x1f, 0xc0, 0xc0, 0x60, 0x3f, 0x80, 0x07, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'Scene2', 128x64px
static const unsigned char PROGMEM image_data_Scene2[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xf0, 0x07, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x03,
  0xff, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x03,
  0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x03,
  0xf0, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0e, 0x00, 0x03,
  0xc0, 0x00, 0x78, 0x00, 0x1f, 0xf8, 0x7f, 0xe1, 0xdf, 0xe0, 0xff, 0xc0, 0x00, 0x0e, 0x00, 0x03,
  0xc0, 0x00, 0x3f, 0xf0, 0x78, 0x30, 0xe0, 0xf1, 0xe0, 0xe1, 0xe1, 0xe0, 0x00, 0x3c, 0x00, 0x03,
  0xc0, 0x00, 0x03, 0xfc, 0x78, 0x01, 0xff, 0xf1, 0xc0, 0xe3, 0xff, 0xe0, 0x01, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1e, 0x70, 0x01, 0xff, 0xe1, 0xc0, 0xe3, 0xff, 0xe0, 0x07, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x70, 0x1e, 0x78, 0x39, 0xe0, 0x41, 0xc0, 0xe1, 0xc0, 0x80, 0x1e, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xfc, 0x3f, 0xf8, 0xff, 0xe1, 0xc0, 0xe0, 0xff, 0xc0, 0x1f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x07, 0xe0, 0x07, 0xc0, 0x1f, 0x81, 0xc0, 0xe0, 0x1f, 0x00, 0x1f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'Scene3', 128x64px
const unsigned char PROGMEM image_data_Scene3[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xf0, 0x07, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x03,
  0xff, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x03,
  0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x03,
  0xf0, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x78, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1e, 0x00, 0x03,
  0xc0, 0x00, 0x78, 0x00, 0x3f, 0xf0, 0x7f, 0xc1, 0xff, 0xc0, 0xff, 0xc0, 0x00, 0x1e, 0x00, 0x03,
  0xc0, 0x00, 0x3f, 0xe0, 0x78, 0x31, 0xe0, 0xe1, 0xe1, 0xe1, 0xc1, 0xe0, 0x03, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x07, 0xfc, 0x70, 0x01, 0xff, 0xf1, 0xc0, 0xe3, 0xff, 0xe0, 0x00, 0x3e, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x3c, 0x70, 0x01, 0xff, 0xe1, 0xc0, 0xe3, 0xff, 0xc0, 0x00, 0x0f, 0x00, 0x03,
  0xc0, 0x00, 0x70, 0x3c, 0x78, 0x31, 0xe0, 0x41, 0xc0, 0xe3, 0xc0, 0x80, 0x1c, 0x0f, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xfc, 0x3f, 0xf8, 0xff, 0xe1, 0xc0, 0xe1, 0xff, 0xc0, 0x0f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x07, 0xe0, 0x07, 0xc0, 0x1f, 0x01, 0xc0, 0xe0, 0x3f, 0x00, 0x01, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'Scene4', 128x64px
const unsigned char PROGMEM image_data_Scene4[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xf0, 0x07, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x03,
  0xff, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x03,
  0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x03,
  0xf0, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0xf0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0xf0, 0x00, 0x3f, 0xf0, 0xff, 0xc3, 0xff, 0xc1, 0xff, 0x80, 0x07, 0xbc, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xe0, 0x78, 0x61, 0xe1, 0xe3, 0xc1, 0xc3, 0xc1, 0xc0, 0x0f, 0x3c, 0x00, 0x03,
  0xc0, 0x00, 0x07, 0xf8, 0xf0, 0x03, 0xff, 0xe3, 0xc1, 0xe3, 0xff, 0xc0, 0x1c, 0x3c, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x3c, 0xf0, 0x03, 0xff, 0xe3, 0xc1, 0xe3, 0xff, 0xc0, 0x3f, 0xff, 0x80, 0x03,
  0xc0, 0x00, 0x60, 0x3c, 0xf0, 0x31, 0xc0, 0x83, 0xc1, 0xe3, 0xc1, 0x00, 0x3f, 0xff, 0x80, 0x03,
  0xc0, 0x00, 0x7f, 0xf8, 0x7f, 0xf0, 0xff, 0xc3, 0xc1, 0xe1, 0xff, 0xc0, 0x00, 0x3c, 0x00, 0x03,
  0xc0, 0x00, 0x0f, 0xc0, 0x0f, 0x80, 0x1f, 0x03, 0x81, 0xc0, 0x3e, 0x00, 0x00, 0x1c, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'Scene5', 128x64px
const unsigned char PROGMEM image_data_Scene5[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xf0, 0x07, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x03,
  0xff, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x03,
  0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x03,
  0xf0, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x78, 0x00, 0x3f, 0xf0, 0xff, 0xc3, 0xff, 0xc0, 0xff, 0x80, 0x0e, 0x30, 0x00, 0x03,
  0xc0, 0x00, 0x3f, 0xe0, 0x78, 0x71, 0xe0, 0xe3, 0xe1, 0xe3, 0xc1, 0xc0, 0x0f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x07, 0xf8, 0xf0, 0x01, 0xff, 0xe3, 0xc1, 0xe3, 0xff, 0xe0, 0x0e, 0x0f, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x3c, 0xf0, 0x01, 0xff, 0xe3, 0xc1, 0xe3, 0xff, 0xc0, 0x00, 0x0f, 0x00, 0x03,
  0xc0, 0x00, 0x70, 0x3c, 0x70, 0x31, 0xe0, 0x83, 0xc1, 0xe3, 0xc0, 0x80, 0x1c, 0x0f, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xf8, 0x3f, 0xf0, 0xff, 0xe3, 0xc1, 0xe1, 0xff, 0xc0, 0x0f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x0f, 0xc0, 0x07, 0xc0, 0x1f, 0x01, 0xc1, 0xe0, 0x3e, 0x00, 0x01, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'Scene6', 128x64px
const unsigned char PROGMEM image_data_Scene6[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xf0, 0x07, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x03,
  0xff, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x03,
  0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x03,
  0xf0, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0xf0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0xf0, 0x00, 0x3f, 0xe0, 0xff, 0xc3, 0xbf, 0xc1, 0xff, 0x80, 0x1e, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xc0, 0xf0, 0x61, 0xc1, 0xe3, 0xc3, 0xc3, 0xc3, 0xc0, 0x1d, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x07, 0xf8, 0xe0, 0x03, 0xff, 0xe3, 0x81, 0xc7, 0xff, 0xc0, 0x1e, 0x0f, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x3c, 0xe0, 0x03, 0xff, 0xc3, 0x81, 0xc7, 0xff, 0xc0, 0x1e, 0x07, 0x80, 0x03,
  0xc0, 0x00, 0xe0, 0x38, 0xf0, 0x73, 0xc0, 0x83, 0x81, 0xc3, 0x81, 0x00, 0x1e, 0x0f, 0x00, 0x03,
  0xc0, 0x00, 0xff, 0xf8, 0x7f, 0xf1, 0xff, 0xc3, 0x81, 0xc1, 0xff, 0x80, 0x07, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x0f, 0xc0, 0x0f, 0x80, 0x3f, 0x03, 0x81, 0xc0, 0x3e, 0x00, 0x01, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'Scene7', 128x64px
const unsigned char PROGMEM image_data_Scene7[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xf0, 0x07, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x03,
  0xff, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x03,
  0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x03,
  0xf0, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x03,
  0xc0, 0x00, 0x3c, 0x00, 0x1f, 0xf8, 0x3f, 0xe0, 0xef, 0xe0, 0x7f, 0xe0, 0x00, 0x3c, 0x00, 0x03,
  0xc0, 0x00, 0x1f, 0xf0, 0x3c, 0x18, 0x70, 0x70, 0xf0, 0xf0, 0xe0, 0xf0, 0x00, 0x38, 0x00, 0x03,
  0xc0, 0x00, 0x03, 0xfe, 0x38, 0x00, 0xff, 0xf8, 0xe0, 0x71, 0xff, 0xf0, 0x00, 0x78, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x0e, 0x38, 0x00, 0xff, 0xf0, 0xe0, 0x71, 0xff, 0xe0, 0x00, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x38, 0x1e, 0x3c, 0x18, 0xf0, 0x20, 0xe0, 0x71, 0xe0, 0x40, 0x01, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x3f, 0xfe, 0x1f, 0xfc, 0x7f, 0xf0, 0xe0, 0x70, 0xff, 0xe0, 0x03, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x03, 0xf0, 0x03, 0xe0, 0x0f, 0x80, 0xe0, 0x70, 0x1f, 0x80, 0x03, 0x80, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'Scene8', 128x64px
const unsigned char PROGMEM image_data_Scene8[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xf0, 0x07, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x03,
  0xff, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x03,
  0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x03,
  0xf0, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0e, 0x00, 0x03,
  0xc0, 0x00, 0x78, 0x00, 0x3f, 0xf0, 0xff, 0xc3, 0xff, 0xc0, 0xff, 0x80, 0x0e, 0x0e, 0x00, 0x03,
  0xc0, 0x00, 0x3f, 0xe0, 0x78, 0x71, 0xe0, 0xe3, 0xe1, 0xe3, 0xc1, 0xc0, 0x03, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x07, 0xf8, 0xf0, 0x01, 0xff, 0xe3, 0xc1, 0xe3, 0xff, 0xe0, 0x0f, 0x1e, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x3c, 0xf0, 0x01, 0xff, 0xe3, 0xc1, 0xe3, 0xff, 0xc0, 0x1c, 0x07, 0x00, 0x03,
  0xc0, 0x00, 0x70, 0x3c, 0x70, 0x31, 0xe0, 0x83, 0xc1, 0xe3, 0xc0, 0x80, 0x1e, 0x0f, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xf8, 0x3f, 0xf0, 0xff, 0xe3, 0xc1, 0xe1, 0xff, 0xc0, 0x0f, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x0f, 0xc0, 0x07, 0xc0, 0x1f, 0x01, 0xc1, 0xe0, 0x3e, 0x00, 0x01, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'Scene9', 128x64px
const unsigned char PROGMEM image_data_Scene9[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xf0, 0x07, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x03,
  0xff, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x03,
  0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x03,
  0xf0, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0xf0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x0f, 0x00, 0x03,
  0xc0, 0x00, 0xf0, 0x00, 0x3f, 0xe0, 0xff, 0xc3, 0xbf, 0xc1, 0xff, 0x80, 0x3c, 0x0f, 0x00, 0x03,
  0xc0, 0x00, 0x7f, 0xc0, 0xf0, 0x61, 0xc1, 0xe3, 0xc3, 0xc3, 0xc3, 0xc0, 0x1e, 0x1f, 0x00, 0x03,
  0xc0, 0x00, 0x07, 0xf8, 0xe0, 0x03, 0xff, 0xe3, 0x81, 0xc7, 0xff, 0xc0, 0x0f, 0xff, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x3c, 0xe0, 0x03, 0xff, 0xc3, 0x81, 0xc7, 0xff, 0xc0, 0x00, 0x0f, 0x00, 0x03,
  0xc0, 0x00, 0xe0, 0x38, 0xf0, 0x73, 0xc0, 0x83, 0x81, 0xc3, 0x81, 0x00, 0x0c, 0x1e, 0x00, 0x03,
  0xc0, 0x00, 0xff, 0xf8, 0x7f, 0xf1, 0xff, 0xc3, 0x81, 0xc1, 0xff, 0x80, 0x1f, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x0f, 0xc0, 0x0f, 0x80, 0x3f, 0x03, 0x81, 0xc0, 0x3e, 0x00, 0x03, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'Scene10', 128x64px
const unsigned char PROGMEM image_data_Scene10[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xf0, 0x07, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x03,
  0xff, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x03,
  0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x03,
  0xf0, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x03, 0xe0, 0x03,
  0xc0, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x1f, 0xfc, 0x03,
  0xc0, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xe0, 0x38, 0x1e, 0x03,
  0xc0, 0x78, 0x00, 0x3f, 0xf0, 0xff, 0xc3, 0xff, 0xc0, 0xff, 0x80, 0x01, 0xe0, 0x78, 0x0e, 0x03,
  0xc0, 0x3f, 0xe0, 0x78, 0x71, 0xe0, 0xe3, 0xe1, 0xe3, 0xc1, 0xc0, 0x01, 0xe0, 0x70, 0x0e, 0x03,
  0xc0, 0x07, 0xf8, 0xf0, 0x01, 0xff, 0xe3, 0xc1, 0xe3, 0xff, 0xe0, 0x01, 0xe0, 0x70, 0x0f, 0x03,
  0xc0, 0x00, 0x3c, 0xf0, 0x01, 0xff, 0xe3, 0xc1, 0xe3, 0xff, 0xc0, 0x01, 0xe0, 0x78, 0x0e, 0x03,
  0xc0, 0x70, 0x3c, 0x70, 0x31, 0xe0, 0x83, 0xc1, 0xe3, 0xc0, 0x80, 0x01, 0xe0, 0x38, 0x1e, 0x03,
  0xc0, 0x7f, 0xf8, 0x3f, 0xf0, 0xff, 0xe3, 0xc1, 0xe1, 0xff, 0xc0, 0x1f, 0xfc, 0x1f, 0xfc, 0x03,
  0xc0, 0x0f, 0xc0, 0x07, 0xc0, 0x1f, 0x03, 0xc0, 0xe0, 0x3e, 0x00, 0x1f, 0xfc, 0x03, 0xe0, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Define custom RX and TX pins
SoftwareSerial Bluetooth(40, 41); // RX on Pin 10, TX on Pin 11

// Pin configurations for MP3 Players
#define TX 11
#define RX 12
#define TE 48
#define RE 49

// MP3 players
SerialMP3Player mp3_ambient(RX, TX);
SerialMP3Player mp3_machine(RE, TE);

// Buttons
#define BUTTON_START 25
#define BUTTON_EMERGENCY 26
#define BUTTON_RESET 27
#define BUTTON_SCENE_1 28
#define BUTTON_SCENE_2 29
#define BUTTON_SCENE_3 30
#define BUTTON_SCENE_4 31
#define BUTTON_SCENE_5 32
#define BUTTON_SCENE_6 33
#define BUTTON_SCENE_7 34
#define BUTTON_SCENE_8 35
#define BUTTON_SCENE_9 A15
#define BUTTON_SCENE_10 A14


// Relays

#define RELAY1_PIN 14
#define RELAY2_PIN 15
#define RELAY3_PIN 16
#define RELAY4_PIN 17
#define RELAY5_PIN 18
#define RELAY6_PIN 19
#define RELAY7_PIN A13
#define RELAY8_PIN A12



// extras pin definitions
#define BUZZER_PIN 42
#define BLUETOOTH_PIN A11 // Pin connected to Bluetooth module VCC


const int ONESHOT1 = 43;
const int ONESHOT2 = 36;
const int ONESHOT3 = 45;
const int ONESHOT4 = 46;


// Define the relay pins in an array
const int RELAY_PINS[] = { RELAY1_PIN, RELAY2_PIN, RELAY3_PIN, RELAY4_PIN, RELAY5_PIN, RELAY6_PIN, RELAY7_PIN, RELAY8_PIN };
const int NUM_RELAYS = sizeof(RELAY_PINS) / sizeof(RELAY_PINS[0]);




// Timers
unsigned long previousMillis = 0;
unsigned long startMillis = 0;
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 50;  // Debounce delay in milliseconds


// States and flags

bool emergencyStopActive = false;
bool startPressed = false;

// Scenes and flags

bool sceneActive = false;
bool scene1Active = false;
bool scene2Active = false;
bool scene3Active = false;
bool scene4Active = false;
bool scene5Active = false;
bool scene6Active = false;
bool scene7Active = false;
bool scene8Active = false;
bool scene9Active = false;
bool scene10Active = false;

bool lastButtonState1 = HIGH;  // Previous state of ONESHOT1
bool lastButtonState2 = HIGH;  // Previous state of ONESHOT2
bool lastButtonState3 = HIGH;  // Previous state of ONESHOT3
bool lastButtonState4 = HIGH;  // Previous state of ONESHOT4

bool shot1State = HIGH;  // Current state of ONESHOT1
bool shot2State = HIGH;  // Current state of ONESHOT2
bool shot3State = HIGH;  // Current state of ONESHOT3
bool shot4State = HIGH;  // Current state of ONESHOT4

bool ambient_tracks[30] = { true };  // Initialize all to true for first mp3
bool machine_tracks[30] = { true };  // Initialize all to true for first mp3

// machine/scene-states
bool idle = false;
bool travelling = false;
bool glitching = false;
bool isShocking = false;
bool isFading = true;  // Tracks if the console is fading

bool isOn = false;                // State of the pixel (ON or OFF)
bool isPixelOn = false; // Tracks encoder switch state


// State variables for connection status
bool ethernetConnected = false;
bool bluetoothEnabled = false; // Tracks Bluetooth state


// Variables for SD card status
bool sdCardInserted = false;
unsigned long lastCheckTime = 0;  // Tracks last time the card was checked
const unsigned long checkInterval = 1000;  // Check every 1 second

bool checkBluetooth() {
    Serial.println("BLUETOOTH MODULE SCAN"); // Send an AT command to the Bluetooth module
    long timeout = millis() + 2000; // 2-second timeout
    
    while (millis() < timeout) {
        if (Serial.available()) { // Check if there's a response
            String response = Serial.readString();
            if (response.indexOf("OK") >= 0) {
                return true; // Bluetooth is responding
            }
        }
    }
    return false; // No response within the timeout
}

// OLED display
Adafruit_SSD1306 oledscreen(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// LCD display
LiquidCrystal_I2C lcd(0x27, 16, 2);



// NeoPixel strips
// pin 10 - blank neopixel


// Pin definitions for NeoPixel
#define PIN 24
#define NUMmachine 100
Adafruit_NeoPixel machine(NUMmachine, PIN, NEO_GRB + NEO_KHZ800);

#define NUMBERS 25
#define DISP 100
Adafruit_NeoPixel time_display(DISP, NUMBERS, NEO_GRB + NEO_KHZ800);

#define CAN 26
#define NUM_CANDLES 3
#define NUM_PIXELS_PER_CANDLE 3
#define NUM_PIXELS (NUM_CANDLES * NUM_PIXELS_PER_CANDLE)
Adafruit_NeoPixel pixels(NUM_PIXELS, CAN, NEO_GRB + NEO_KHZ800);

// Definitions for the additional independent LEDs
#define NUM_EXTRA_PIXELS 6  // Number of independent extra pixels
Adafruit_NeoPixel spotlights(NUM_EXTRA_PIXELS, CAN, NEO_GRB + NEO_KHZ800);


// Which pin on the Arduino is connected to the time circuits?
#define circuits 27
// How many Neomachine are attached to the Arduino?
#define circ 100  // Popular NeoPixel ring size
Adafruit_NeoPixel time_circuits(circ, circuits, NEO_GRB + NEO_KHZ800);


// Which pin on the Arduino is connected to the time circuits?
#define indicators 23
// How many Neomachine are attached to the Arduino?
#define indicate 100  // Popular NeoPixel ring size
Adafruit_NeoPixel display(indicate, indicators, NEO_GRB + NEO_KHZ800);

// Define encoder pins
#define CLK_PIN A4
#define DT_PIN A5
#define SW_PIN A6

// Encoder object
Encoder encoder(CLK_PIN, DT_PIN);

/* Main Menu and Submenu Navigation */

// Define Main Menu and Submenu options
const char* mainMenuOptions[] = {
    "Bluetooth Settings",
    "Display Settings",
    "Sound Options",
    "System Info",
    
};
// Menu states
int currentMenu = 0; // 0 = Main Menu, 1+ = Submenus
int menuOption = 0;  // Current option in the main menu
int subMenuOption = 0; // Current option in the submenu
const int totalMenuOptions = sizeof(mainMenuOptions) / sizeof(mainMenuOptions[0]);


// Button state tracking
bool buttonPressed = false;



const char* subMenu1Options[] = {"Bluetooth On/Off", "Connectivity Info", "Pairing Mode", "Back"};
const char* subMenu2Options[] = {"Brightness", "Contrast", "Color Mode", "Back"};
const char* subMenu3Options[] = {"Volume", "Equalizer", "Sound Test", "Back"};
const char* subMenu4Options[] = {"IP Config", "MAC Address", "Diagnostics", "Back"};

const char** currentSubMenu = nullptr; // Declare globally for use in the loop
int submenuSize = 4; // Fixed size for all submenus


void displayMainMenu() {
  tft.fillScreen(0x0000); // Clear the screen

  // Print "Main Menu" title
  tft.setCursor(10, 10);  // Set cursor position for title
  tft.setTextSize(1);     // Adjust text size
  tft.setTextColor(0xFFFF, 0x0000); // White text
  tft.print("Main Menu ");          // Print main part of the title

  // Print "(BT: ON)" if Bluetooth is enabled
  if (bluetoothEnabled) {
    tft.setTextColor(0x001F, 0x0000); // Blue text
    tft.print("BT: ON");
  }

  // Display all menu options on one page
  for (int i = 0; i < totalMenuOptions; i++) {
    if (i == menuOption) {
      tft.setTextColor(0xF800, 0x0000); // Red text for the selected option
    } else {
      tft.setTextColor(0xFFFF, 0x0000); // White text for other options
    }

    tft.setCursor(10, 30 + (i * 20)); // Adjust position for each menu item
    tft.print(mainMenuOptions[i]);    // Print the option name
  }
}
void displaySubMenu(const char* options[], int menuSize) {
  tft.fillScreen(0x0000); // Clear the screen

  tft.setCursor(10, 10); // Set cursor position for title
  tft.print("Submenu:");

  for (int i = 0; i < menuSize; i++) { // Loop through submenu options
    if (i == subMenuOption) {
      tft.setTextColor(0xF800, 0x0000); // Red text for the selected option
    } else {
      tft.setTextColor(0xFFFF, 0x0000); // White text for other options
    }

    tft.setCursor(10, 30 + (i * 20)); // Set position for each submenu item
    tft.print(options[i]);            // Display the submenu option name
  }
}

void toggleBluetooth() {
  tft.fillScreen(0x0000); // Clear the screen

  if (bluetoothEnabled) {
    // Turn Bluetooth off
     digitalWrite(BLUETOOTH_PIN, LOW); // Start with Bluetooth off
    turnBluetoothOff();
    tft.setCursor(10, 10);
    tft.setTextColor(0xFFFF, 0x0000); // White text
    tft.print("Bluetooth Disabled");
  } else {
    // Turn Bluetooth on
    digitalWrite(BLUETOOTH_PIN, HIGH); // Start with Bluetooth off
    turnBluetoothOn();
    tft.setCursor(10, 10);
    tft.setTextColor(0x07E0, 0x0000); // Green text
    tft.print("Bluetooth Enabled");
    
  }

  delay(2000); // Display the message for 2 seconds
  
  displayMainMenu();
 // displaySubMenu(subMenu1Options, 3); // Return to the submenu
}
void bluetoothinfo() {
  tft.fillScreen(0x0000);
  tft.setCursor(10, 10);
   tft.println("HC-05");
   tft.println("password");
  tft.setTextSize(2);
  tft.println("1 2 3 4");
  tft.setCursor(30, 0);
  delay(5000); // Simulate the action
   tft.setTextSize(1);
  displaySubMenu(subMenu1Options, 3); // Return to submenu
}
// Functions FOR toggle Bluetooth
void turnBluetoothOn() {
    digitalWrite(BLUETOOTH_PIN, HIGH);
    bluetoothEnabled = true;
    Serial.println("Bluetooth Enabled");
}
void turnBluetoothOff() {
    digitalWrite(BLUETOOTH_PIN, LOW);
    bluetoothEnabled = false;
    Serial.println("Bluetooth Disabled");
}

void displayError_BLUETOOTH(String message) {
  tft.fillScreen(0x0000);       // Clear the screen
  tft.setTextColor(0xFFFF, 0x0000); // White text
  tft.setTextSize(2);           // Set text size
  tft.setCursor(10, 10);        // Position the cursor
  tft.println(message);         // Display the error message

  Serial.println(message); // For debugging
}

void pairingMode() {
  Serial.println("Entering Bluetooth Pairing Mode...");
  // Add logic to activate pairing mode
  // Example: Send AT commands to the Bluetooth module

  tft.fillScreen(0x0000); // Clear screen
  tft.setCursor(10, 10);
  tft.println("Pairing Mode Enabled");
  delay(3000); // Pause to show the message
  displayMainMenu(); // Return to the main menu
}

void adjustBrightness() {
  static int lastEncoderPos = 0; // Track the last position of the encoder
  static int brightness = 128;  // Initial brightness level (0-255)

  int currentEncoderPos = encoder.read() / 2; // Adjust sensitivity if needed

  // Adjust brightness based on encoder movement
  if (currentEncoderPos > lastEncoderPos) {
    brightness += 10; // Increase brightness
    if (brightness > 255) brightness = 255; // Clamp to max
  } else if (currentEncoderPos < lastEncoderPos) {
    brightness -= 10; // Decrease brightness
    if (brightness < 0) brightness = 0; // Clamp to min
  }

  lastEncoderPos = currentEncoderPos;

  // Apply brightness using PWM
  analogWrite(TFT_BACKLIGHT_PIN, brightness);

  // Visual feedback
  tft.fillScreen(0x0000);
  tft.setCursor(10, 10);
  tft.setTextColor(0xFFFF, 0x0000);
  tft.setTextSize(1);
  tft.print("Brightness: ");
  tft.print(brightness);

  Serial.println("Brightness adjusted to: " + String(brightness));

  // Return to submenu if button is pressed
  if (digitalRead(SW_PIN) == LOW && !buttonPressed) {
    buttonPressed = true;
    displaySubMenu(subMenu2Options, 4); // Return to Display Settings submenu
  }

  if (digitalRead(SW_PIN) == HIGH) {
    buttonPressed = false;
  }
}

void adjustContrast() {
  static int lastEncoderPos = 0;
  static int contrast = 128;

  int currentEncoderPos = encoder.read() / 2;

  if (currentEncoderPos > lastEncoderPos) {
    contrast += 10;
    if (contrast > 255) contrast = 255;
  } else if (currentEncoderPos < lastEncoderPos) {
    contrast -= 10;
    if (contrast < 0) contrast = 0;
  }

  lastEncoderPos = currentEncoderPos;

  // Visual feedback
  tft.fillScreen(0x0000);
  tft.setCursor(10, 10);
  tft.setTextColor(0xFFFF, 0x0000);
  tft.setTextSize(1);
  tft.print("Contrast: ");
  tft.print(contrast);

  Serial.println("Contrast adjusted to: " + String(contrast));

  // Return to submenu
  if (digitalRead(SW_PIN) == LOW && !buttonPressed) {
    buttonPressed = true;
    displaySubMenu(subMenu2Options, 4); // Return to Display Settings submenu
  }

  if (digitalRead(SW_PIN) == HIGH) {
    buttonPressed = false;
  }
}
void changeColorMode() {
  static int colorMode = 0; // 0 = Day mode, 1 = Night mode

  colorMode = !colorMode; // Toggle mode

  if (colorMode == 0) {
    Serial.println("Day Mode Activated");
    // Update the display for Day Mode
    tft.fillScreen(0xFFFF); // Example: White background
  } else {
    Serial.println("Night Mode Activated");
    // Update the display for Night Mode
    tft.fillScreen(0x0000); // Example: Black background
  }
}

void adjustVolume() {
  // Your logic for adjusting volume
}

void setEqualizer() {
  // Your logic for setting the equalizer
}

void soundTest() {
  // Your logic for a sound test
}

void displayIPConfig() {
  // Your logic for displaying IP configuration
}

void displayMACAddress() {
  // Your logic for displaying MAC address
}

void runDiagnostics() {
  // Your logic for running diagnostics
}


void twentyfive() {

  //5
  // time_display.setPixelColor(0, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(1, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(2, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(3, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(4, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(5, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(6, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/
  //2

  time_display.setPixelColor(7, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(8, 255, 0, 0);   // Set the pixel color
                                              // time_display.setPixelColor(9, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(10, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(11, 255, 0, 0);  // Set the pixel color
                                              // time_display.setPixelColor(12, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(13, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/
  //0

  time_display.setPixelColor(14, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(15, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(16, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(17, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(18, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(19, 255, 0, 0);  // Set the pixel color
                                              //  time_display.setPixelColor(20, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/
  //2

  time_display.setPixelColor(21, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(22, 255, 0, 0);
  //time_display.setPixelColor(23, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(24, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(25, 255, 0, 0);  // Set the pixel color
                                              // time_display.setPixelColor(26, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(27, 255, 0, 0);  // Set the pixel color

  time_display.show();
}
void five_ten() {

  time_display.setPixelColor(0, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(1, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(2, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(3, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(4, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(5, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(6, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(7, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(8, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(9, 255, 0, 0); // Set the pixel color
  //  time_display.setPixelColor(10, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(11, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(12, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(13, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(14, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(15, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(16, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(17, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(18, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(19, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(20, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/
  //5

  //time_display.setPixelColor(21, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(22, 255, 0, 0);
  time_display.setPixelColor(23, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(24, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(25, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(26, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(27, 255, 0, 0);  // Set the pixel color

  time_display.show();
}
void zero() {

  time_display.setPixelColor(0, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(1, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(2, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(3, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(4, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(5, 255, 0, 0);  // Set the pixel color
  //time_display.setPixelColor(6, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(7, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(8, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(9, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(10, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(11, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(12, 255, 0, 0);  // Set the pixel color
  //  time_display.setPixelColor(13, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(14, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(15, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(16, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(17, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(18, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(19, 255, 0, 0);  // Set the pixel color
  //  time_display.setPixelColor(20, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(21, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(22, 255, 0, 0);
  time_display.setPixelColor(23, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(24, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(25, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(26, 255, 0, 0);  // Set the pixel color
  //  time_display.setPixelColor(27, 255, 0, 0); // Set the pixel color

  time_display.show();
}
void ninefourtwo() {  //

  time_display.setPixelColor(0, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(1, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(2, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(3, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(4, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(5, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(6, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(7, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(8, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(9, 255, 0, 0);  // Set the pixel color
  //  time_display.setPixelColor(10, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(11, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(12, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(13, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(14, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(15, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(16, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(17, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(18, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(19, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(20, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(21, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(22, 255, 0, 0);
  //  time_display.setPixelColor(23, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(24, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(25, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(26, 255, 0, 0);  // Set the pixel color
  //   time_display.setPixelColor(27, 255, 0, 0); // Set the pixel color

  time_display.show();
}
void oneeightfourtwo() {

  time_display.setPixelColor(0, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(1, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(2, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(3, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(4, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(5, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(6, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(7, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(8, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(9, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(10, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(11, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(12, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(13, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(14, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(15, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(16, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(17, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(18, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(19, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(20, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(21, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(22, 255, 0, 0);
  //  time_display.setPixelColor(23, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(24, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(25, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(26, 255, 0, 0);  // Set the pixel color
  //   time_display.setPixelColor(27, 255, 0, 0); // Set the pixel color

  time_display.show();
}
void animateExplodingText(const char* text) {
  oledscreen.clearDisplay();  // Clear the screen

  // Set text color and size
  oledscreen.setTextColor(SSD1306_WHITE);
  int textSize = 2;  // Set the text size (manually defined)
  oledscreen.setTextSize(textSize);

  // Calculate text width and height based on text size
  int16_t textWidth = strlen(text) * 6 * textSize;  // Approx. 6 pixels per character per size
  int16_t textHeight = 8 * textSize;                // Approx. 8 pixels for character height per size

  // Center the text
  int16_t textX = (oledscreen.width() - textWidth) / 2;
  int16_t textY = (oledscreen.height() - textHeight) / 2;

  // Draw the initial text
  oledscreen.setCursor(textX, textY);
  oledscreen.print(text);
  oledscreen.display();

  // Explosion animation: clear the text piece by piece
  for (int radius = 1; radius < oledscreen.height(); radius += 3) {
    for (int i = 0; i < 360; i += 15) {               // Draw fragments in all directions
      float angle = i * 3.14159 / 180;                // Convert degrees to radians
      int fragmentX = textX + (radius * cos(angle));  // X position for the fragment
      int fragmentY = textY + (radius * sin(angle));  // Y position for the fragment

      oledscreen.fillRect(fragmentX, fragmentY, 2, 2, SSD1306_INVERSE);  // Small square fragment
    }
    oledscreen.display();
    delay(10);  // Speed of the animation
  }

  // Clear the screen after the animation
  oledscreen.clearDisplay();
  oledscreen.display();
}


const long blink_interval = 500;  // Blink interval in milliseconds

// Function to handle pixel blinking
void updateBlinkingPixel(int pixel, int red, int green, int blue) {
  unsigned long currentMillis = millis();

  // Check if it's time to toggle the LED state
  if (currentMillis - previousMillis >= blink_interval) {
    previousMillis = currentMillis;  // Update the last time the state changed

    // Toggle the state
    isOn = !isOn;

    // Update the specified pixel
    if (isOn) {
      display.setPixelColor(pixel, display.Color(red, green, blue));  // Set to the specified color
    } else {
      display.setPixelColor(pixel, 0);  // Turn off the pixel
    }

    // Update the display
    display.show();
  }
}
unsigned long interval = random(50, 200);  // Random interval between updates
int twinkle = random(100, 2000);           // Change the flash speed randomly
int fliker = random(600, 1200);            // Change the flash speed randomly
int timefliker = 15;
int electric = random(600, 1200);  // Change the flash speed randomly
const long fade_time = 4000;       //console fade in time  //  needs to be length of boot up track
int flickerSpeed = 800;            // Speed of the flicker in milliseconds

void timecircuit_flicker() {
  unsigned long currentMillis = millis();

  // Check if the desired time has passed to update the LEDs
  if (currentMillis - previousMillis >= flickerSpeed) {
    previousMillis = currentMillis;  // Update the time for the next interval

    // Update all pixels with new random colors
    for (int i = 0; i < time_circuits.numPixels(); i++) {
      time_circuits.setPixelColor(i, time_circuits.Color(random(256), random(256), random(256)));
    }
    time_circuits.show();  // Update the LEDs with the new colors
  }
}
void console_flikr() {
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= fliker) {
    previousMillis = currentMillis;
    for (int i = 11; i <= 14; i++) {
      if (random(10) == 0) {
        machine.setPixelColor(i, 255, 255, 255);

      } else {
        machine.setPixelColor(i, 0, 0, 0);
      }
    }
    machine.show();
  }
}
void shocking() {
  unsigned long currentMillis = millis();
  if (machine_tracks[7]) {      // Note: Track 21 is at index 20 in a zero-based array
    mp3_machine.play(21);       // electric
    machine_tracks[7] = false;  // Set to false to prevent re-playing
  }
  if (currentMillis - previousMillis >= electric) {
    previousMillis = currentMillis;
    for (int i = 0; i < 20; i++) {
      machine.setPixelColor(i, 255, 255, 255);
    }

    delay(50);
    machine.clear();
    machine.show();

    if (currentMillis - previousMillis >= electric) {
      previousMillis = currentMillis;
      for (int i = 0; i < 20; i++) {
        time_display.setPixelColor(i, 255, 255, 255);
      }
      for (int i = 1; i < 50; i++) {
        machine.setPixelColor(i, 255, 255, 255);
      }
      time_display.show();
      machine.show();
      delay(50);
      time_display.clear();
      machine.clear();
      time_display.show();
      machine.show();
    }
  }
}
void twink() {
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= twinkle) {
    previousMillis = currentMillis;

    // Generate a new random interval for the next update
    twinkle = random(2, 100);  // Flash quicker with shorter intervals

    for (int i = 22; i < 28; i++) {
      if (random(97) == 0) {  // 50% chance for this LED to light up
        // Generate a random brightness level
        int brightness = random(5, 100);  // Adjust range for subtle or bright twinkle
        // Set the pixel with the random brightness (white light)
        machine.setPixelColor(i, brightness, brightness, brightness);
      } else {
        // Keep the pixel off
        machine.setPixelColor(i, 0, 0, 0);
      }
    }

    machine.show();  // Refresh the LEDs to show the changes
  }
}
void time_flikr() {
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= timefliker) {
    previousMillis = currentMillis;
    for (int i = 0; i <= 30; i++) {
      if (random(10) == 0) {
        time_display.setPixelColor(i, 255, 255, 255);

      } else {
        time_display.setPixelColor(i, 0, 0, 0);
      }
    }
    time_display.show();
  }
}
void console_fade() {
  unsigned long currentMillis = millis();

  // Fade only after a specified time has passed
  if (currentMillis - previousMillis >= fade_time) {
    previousMillis = currentMillis;

    // Smooth fade from black (0) to full brightness (255)
    for (int brightness = 0; brightness <= 255; brightness++) {  // Change direction of the loop
      for (int i = 0; i <= 9; i++) {
        // Set color with the current brightness level (RGB values for white)
        time_circuits.setPixelColor(i, time_circuits.Color(brightness, brightness, brightness));
      }

      time_circuits.show();  // Update LED colors only once after setting all pixels
      delay(10);             // Add a short delay for the fade effect to be visible
    }
  }
}
void console_fade_out() {
  unsigned long currentMillis = millis();

  // Fade only after a specified time has passed
  if (currentMillis - previousMillis >= fade_time) {
    previousMillis = currentMillis;

    // Smooth fade from full brightness (255) to black (0)
    for (int brightness = 255; brightness >= 0; brightness--) {
      for (int i = 11; i <= 17; i++) {
        // Set color with the current brightness level (RGB values for white)
        machine.setPixelColor(i, machine.Color(brightness, brightness, brightness));
      }

      machine.show();  // Update LED colors only once after setting all pixels
      delay(70);       // Add a short delay for the fade effect to be visible
    }
  }
}
const long twinkleDelay = 5;            // Delay in milliseconds for the twinkle effect
int ledIndices[] = { 18, 19, 20, 21 };  // Array of LED indices
void twinkleLEDs() {
  unsigned long currentMillis = millis();  // Get the current time
// Check if it's time to update the LEDs
  if (currentMillis - previousMillis >= twinkleDelay) {
    previousMillis = currentMillis;  // Save the last update time

    // Update each LED randomly
    for (int i = 0; i < 4; i++) {
      int r = random(0, 2);  // Randomly turn the LED on (green) or off (black)
      if (r == 1) {
        machine.setPixelColor(ledIndices[i], 255, 255, 255);  // Turn LED green
      } else {
        machine.setPixelColor(ledIndices[i], 0, 0, 0);  // Turn LED off
      }
    }

    machine.show();  // Apply the changes to the LEDs
  }
}
// Variables for glitch effects
unsigned long previousMillisPixel1 = 0;
unsigned long previousMillisPixel2 = 0;
unsigned long glitchIntervalPixel1 = random(200, 700);  // Random initial interval for Pixel 1
unsigned long glitchIntervalPixel2 = random(200, 700);  // Random initial interval for Pixel 2
int brightnessPixel1 = 200;                             // Initial brightness for Pixel 1
int brightnessPixel2 = 200;                             // Initial brightness for Pixel 2
void glitchEffect() {
  unsigned long currentMillis = millis();

  // Handle Pixel 1 glitch
  if (currentMillis - previousMillisPixel1 >= glitchIntervalPixel1) {
    previousMillisPixel1 = currentMillis;
    glitchIntervalPixel1 = random(200, 700);  // Set a new random interval

    // Subtly vary the brightness for Pixel 1
    brightnessPixel1 = random(50, 150);                                     // Slight dimming or brightening
    machine.setPixelColor(1, brightnessPixel1, brightnessPixel1 * 0.8, 0);  // Dirty yellow
    machine.show();
  }

  // Handle Pixel 2 glitch
  if (currentMillis - previousMillisPixel2 >= glitchIntervalPixel2) {
    previousMillisPixel2 = currentMillis;
    glitchIntervalPixel2 = random(200, 700);  // Set a new random interval

    // Subtly vary the brightness for Pixel 2
    brightnessPixel2 = random(50, 150);                                     // Slight dimming or brightening
    machine.setPixelColor(2, brightnessPixel2, brightnessPixel2 * 0.8, 0);  // Dirty yellow
    machine.show();
  }
}
void glitchRed() {
  unsigned long currentMillis = millis();

  // Handle Pixel 1 glitch
  static unsigned long previousMillisPixel1 = 0;
  static int glitchIntervalPixel1 = random(200, 700);
  static int brightnessPixel1 = random(20, 255);

  if (currentMillis - previousMillisPixel1 >= glitchIntervalPixel1) {
    previousMillisPixel1 = currentMillis;
    glitchIntervalPixel1 = random(200, 700);  // Set a new random interval

    // Subtly vary the brightness for Pixel 1
    brightnessPixel1 = random(20, 255);                // Slight dimming or brightening
    machine.setPixelColor(1, brightnessPixel1, 0, 0);  // Pure red with varying brightness
    machine.show();
  }

  // Handle Pixel 2 glitch
  static unsigned long previousMillisPixel2 = 0;
  static int glitchIntervalPixel2 = random(200, 700);
  static int brightnessPixel2 = random(50, 150);

  if (currentMillis - previousMillisPixel2 >= glitchIntervalPixel2) {
    previousMillisPixel2 = currentMillis;
    glitchIntervalPixel2 = random(200, 700);  // Set a new random interval

    // Subtly vary the brightness for Pixel 2
    brightnessPixel2 = random(50, 255);                // Slight dimming or brightening
    machine.setPixelColor(2, brightnessPixel2, 0, 0);  // Pure red with varying brightness
    machine.show();
  }
}
void scene2() {
  lcd.clear();
  lcd.print("Scene 2: Running");
  Serial.println("Scene 2 Activated");

  mp3_machine.play(2);  // Scene 2 MP3
  for (int i = 0; i < machine.numPixels(); i++) {
    machine.setPixelColor(i, machine.Color(0, 255, 0));  // Green
  }
  machine.show();

  digitalWrite(RELAY_PINS[2], HIGH);  // Relay logic
  digitalWrite(RELAY_PINS[3], HIGH);
}
void scene3() {
  lcd.clear();
  lcd.print("Scene 3: Running");
  Serial.println("Scene 3 Activated");

  mp3_machine.play(3);  // Scene 3 MP3
  for (int i = 0; i < machine.numPixels(); i++) {
    machine.setPixelColor(i, machine.Color(0, 0, 255));  // Blue
  }
  machine.show();

  digitalWrite(RELAY_PINS[4], HIGH);  // Relay logic for Scene 3
  digitalWrite(RELAY_PINS[5], HIGH);
}
void scene4() {
  lcd.clear();
  lcd.print("Scene 4: Running");
  Serial.println("Scene 4 Activated");

  mp3_machine.play(4);  // Scene 4 MP3
  for (int i = 0; i < machine.numPixels(); i++) {
    machine.setPixelColor(i, machine.Color(255, 255, 0));  // Yellow
  }
  machine.show();

  digitalWrite(RELAY_PINS[6], HIGH);  // Relay logic for Scene 4
  digitalWrite(RELAY_PINS[7], HIGH);
}
void scene5() {
  lcd.clear();
  lcd.print("Scene 5: Running");
  Serial.println("Scene 5 Activated");

  mp3_machine.play(5);  // Scene 5 MP3
  for (int i = 0; i < machine.numPixels(); i++) {
    machine.setPixelColor(i, machine.Color(255, 0, 255));  // Purple
  }
  machine.show();

  digitalWrite(RELAY_PINS[8], HIGH);  // Relay logic for Scene 5
  digitalWrite(RELAY_PINS[9], HIGH);
}
void scene6() {
  lcd.clear();
  lcd.print("Scene 6: Running");
  Serial.println("Scene 6 Activated");

  mp3_machine.play(5);  // Scene 5 MP3
  for (int i = 0; i < machine.numPixels(); i++) {
    machine.setPixelColor(i, machine.Color(255, 0, 255));  // Purple
  }
  machine.show();

  digitalWrite(RELAY_PINS[8], HIGH);  // Relay logic for Scene 5
  digitalWrite(RELAY_PINS[9], HIGH);
}
void scene7() {
  lcd.clear();
  lcd.print("Scene 7: Running");
  Serial.println("Scene 7 Activated");

  mp3_machine.play(5);  // Scene 5 MP3
  for (int i = 0; i < machine.numPixels(); i++) {
    machine.setPixelColor(i, machine.Color(255, 0, 255));  // Purple
  }
  machine.show();

  digitalWrite(RELAY_PINS[8], HIGH);  // Relay logic for Scene 5
  digitalWrite(RELAY_PINS[9], HIGH);
}
void scene8() {
  lcd.clear();
  lcd.print("Scene 8: Running");
  Serial.println("Scene 8 Activated");

  mp3_machine.play(5);  // Scene 5 MP3
  for (int i = 0; i < machine.numPixels(); i++) {
    machine.setPixelColor(i, machine.Color(255, 0, 255));  // Purple
  }
  machine.show();

  digitalWrite(RELAY_PINS[8], HIGH);  // Relay logic for Scene 5
  digitalWrite(RELAY_PINS[9], HIGH);
}
void scene9() {
  lcd.clear();
  lcd.print("Scene 9: Running");
  Serial.println("Scene 9 Activated");

  mp3_machine.play(5);  // Scene 5 MP3
  for (int i = 0; i < machine.numPixels(); i++) {
    machine.setPixelColor(i, machine.Color(255, 0, 255));  // Purple
  }
  machine.show();

  digitalWrite(RELAY_PINS[8], HIGH);  // Relay logic for Scene 5
  digitalWrite(RELAY_PINS[9], HIGH);
}
void scene10() {
  lcd.clear();
  lcd.print("Scene 10: Running");
  Serial.println("Scene 10 Activated");

  mp3_machine.play(5);  // Scene 5 MP3
  for (int i = 0; i < machine.numPixels(); i++) {
    machine.setPixelColor(i, machine.Color(255, 0, 255));  // Purple
  }
  machine.show();

  digitalWrite(RELAY_PINS[8], HIGH);  // Relay logic for Scene 5
  digitalWrite(RELAY_PINS[9], HIGH);
}
void IDLE() {
  lcd.clear();
  lcd.print("IDLE: Running");
  Serial.println("IDLE Activated");
  updateBlinkingPixel(3, 0, 0, 50);  // Blink pixel 1 with GREEN color
  mp3_machine.play(5);  // Scene 5 MP3
  for (int i = 0; i < machine.numPixels(); i++) {
    machine.setPixelColor(i, machine.Color(255, 0, 255));  // Purple
  }
  machine.show();


}

// Function to check if a new scene button is pressed
const int buttonPins[] = {
  BUTTON_SCENE_1,
  BUTTON_SCENE_2,
  BUTTON_SCENE_3,
  BUTTON_SCENE_4,
  BUTTON_SCENE_5,
  BUTTON_SCENE_6,
  BUTTON_SCENE_7,
  BUTTON_SCENE_8,
  BUTTON_SCENE_9,
  BUTTON_SCENE_10,
};
const int numButtons = sizeof(buttonPins) / sizeof(buttonPins[0]);

// Activate a scene
void activateScene(int sceneNumber) {
  lcd.clear();
  lcd.print("Scene ");
  lcd.print(sceneNumber);
  lcd.print(" Active");
  Serial.print("Scene ");
  Serial.print(sceneNumber);
  Serial.println(" Activated");

  switch (sceneNumber) {
    case 1: scene2(); break;
    case 2: scene3(); break;
    case 3: scene4(); break;
    case 4: scene5(); break;
    case 5: scene6(); break;
    case 6: scene7(); break;
    case 7: scene8(); break;
    case 8: scene9(); break;
    case 9: scene10(); break;


    default: Serial.println("Unknown Scene"); break;
  }
}
// Debounce function
bool isButtonPressed(int buttonPin) {
  if (!digitalRead(buttonPin)) {
    if (millis() - lastDebounceTime > debounceDelay) {
      lastDebounceTime = millis();
      return true;
    }
  }
  return false;
}

// Function to handle scenes
void handleScenes() {
  if (!digitalRead(BUTTON_SCENE_1) && !scene1Active) {
    sceneActive = true;
    activateScene(1);
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_Scene2, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
  }
  if (!digitalRead(BUTTON_SCENE_2) && !scene2Active) {
    scene2Active = true;
    activateScene(2);
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_Scene3, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
  }
  if (!digitalRead(BUTTON_SCENE_3) && !scene3Active) {
    scene3Active = true;
    activateScene(3);
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_Scene4, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
  }
  if (!digitalRead(BUTTON_SCENE_4) && !scene4Active) {
    scene4Active = true;
    activateScene(4);
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_Scene5, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
  }
  if (!digitalRead(BUTTON_SCENE_5) && !scene5Active) {
    scene5Active = true;
    activateScene(5);
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_Scene6, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
  }
  if (!digitalRead(BUTTON_SCENE_6) && !scene6Active) {
    scene6Active = true;
    activateScene(6);
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_Scene7, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
  }
  if (!digitalRead(BUTTON_SCENE_7) && !scene7Active) {
    scene7Active = true;
    activateScene(7);
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_Scene8, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
  }
  if (!digitalRead(BUTTON_SCENE_8) && !scene8Active) {
    scene8Active = true;
    activateScene(8);
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_Scene9, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
  }
  if (!digitalRead(BUTTON_SCENE_9) && !scene9Active) {
    scene9Active = true;
    activateScene(9);
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_Scene10, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
  }
  if (!digitalRead(BUTTON_SCENE_10) && !scene10Active) {
    scene10Active = true;
    activateScene(10);
  }
}
// Function to handle emergency stop
void handleEmergencyStop() {
  if (!digitalRead(BUTTON_EMERGENCY) && !emergencyStopActive) {
    emergencyStopActive = true;
digitalWrite(RELAY1_PIN, HIGH); //  relay off
digitalWrite(RELAY2_PIN, HIGH); //  relay off
digitalWrite(RELAY3_PIN, HIGH); //  relay off
digitalWrite(RELAY4_PIN, HIGH); //  relay off
digitalWrite(RELAY5_PIN, HIGH); //  relay off
digitalWrite(RELAY6_PIN, HIGH); //  relay off
digitalWrite(RELAY7_PIN, HIGH); //  relay off
digitalWrite(RELAY8_PIN, HIGH); //  relay off
    Serial.println("emergency stop");
    display.setPixelColor(1, 255, 0, 0);  // Pixel update
    display.setPixelColor(2, 255, 0, 0);  // Pixel update
    display.show();
    lcd.clear();
    lcd.print("EMERGENCY STOP");


    mp3_ambient.stop();
    mp3_machine.stop();
    machine.clear();
    machine.show();
    Serial.println("Emergency Stop Activated");
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_stop, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
    machine.clear();
    for (int i = 0; i <= 100; i++) {
      machine.setPixelColor(i, machine.Color(255, 255, 255));  // white color
    }
    machine.show();
    time_display.clear();
    for (int i = 0; i <= 100; i++) {
      time_display.setPixelColor(i, time_display.Color(255, 255, 255));  // white color
    }
    time_display.show();
    pixels.clear();
    for (int i = 0; i <= 100; i++) {
      pixels.setPixelColor(i, pixels.Color(255, 255, 255));  // white color
    }
    pixels.show();
    time_circuits.clear();
    for (int i = 0; i <= 100; i++) {
      time_circuits.setPixelColor(i, time_circuits.Color(255, 255, 255));  // white color
    }
    time_circuits.show();
  }
  handleReset();
}
// Function to handle system reset
void handleReset() {
  unsigned long currentMillis = millis();
  if (!digitalRead(BUTTON_RESET)) {
    digitalWrite(RELAY1_PIN, HIGH); //  relay off
    digitalWrite(RELAY2_PIN, HIGH); //  relay off
    digitalWrite(RELAY3_PIN, HIGH); //  relay off
    digitalWrite(RELAY4_PIN, HIGH); //  relay off
    digitalWrite(RELAY5_PIN, HIGH); //  relay off
    digitalWrite(RELAY6_PIN, HIGH); //  relay off
    digitalWrite(RELAY7_PIN, HIGH); //  relay off
    digitalWrite(RELAY8_PIN, HIGH); //  relay off
    display.clear();
    display.show();
    lcd.clear();
    lcd.print("System Resetting...");
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_reset, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
    display.setPixelColor(0, 0, 255, 0);  // Pixel 0 update
    display.setPixelColor(1, 255, 0, 0);  // Pixel 1 update
    display.setPixelColor(2, 0, 0, 0);    // Pixel 2 update
    display.show();
    mp3_ambient.stop();
    mp3_machine.stop();
    machine.clear();
    machine.show();
    bool sceneActive = false, scene1Active = false, scene2Active = false, scene3Active = false,
         scene4Active = false, scene5Active = false, scene6Active = false,
         scene7Active = false, scene8Active = false, scene9Active = false,
         scene10Active = false, idle = false;
    startPressed = false;
    emergencyStopActive = false;
    Serial.println("System Reset");
    
    lcd.clear();
    machine.clear();
    machine.show();
    time_circuits.clear();
    time_circuits.show();
    pixels.clear();
    pixels.show();
    time_display.clear();
    time_display.show();
    
    cute.play(S_MODE3);
    lcd.clear();
    lcd.print("System Ready");
    
    updateBlinkingPixel(1, 0, 0, 255);  // Blink pixel 1 with blue color
    oledscreen.clearDisplay();
    oledscreen.drawBitmap(0, 0, image_data_chamber_logo, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    oledscreen.display();
  }
  
}
void handleStartButton() {    ///  acting as scene 1
  unsigned long currentMillis = millis();
  if (!digitalRead(BUTTON_START) && !startPressed) {
    updateBlinkingPixel(1, 0, 0, 255);  // Blink pixel 1 with blue color
    startPressed = true;
    lcd.clear();
    lcd.print("Machine Starting...");
    startMillis = millis();
    Serial.println("Start Button Pressed");


    // Continue with the rest of the logic after fading completes
    lcd.clear();
    lcd.print("Scene 1: Running");
    scene1Active = true;
    Serial.println("Scene 1 Activated");
    updateBlinkingPixel(3, 0, 50, 0);  // Blink pixel 1 with GREEN color



    mp3_machine.play(1);  // Start Scene 1 MP3

    // Define scene timestamps
    unsigned long scene1stamp1 = millis();
    unsigned long scene1stamp2 = scene1stamp1 + 5000;  // First delay ends
    unsigned long scene1stamp3 = scene1stamp2 + 8000;  // Second delay ends
    unsigned long scene1stamp4 = scene1stamp3 + 5000;  // Third delay ends
    unsigned long scene1stamp5 = scene1stamp4 + 5000;  // fourth delay ends
    unsigned long scene1stamp6 = scene1stamp5 + 5000;  // fifth delay ends
    unsigned long scene1stamp7 = scene1stamp6 + 5000;  // sixth delay ends
    unsigned long idleStart = scene1stamp7 + 8000;     // Enter idle state after this

    while (millis() < idleStart) {
      unsigned long currentMillis = millis();

      // First 5000ms action
      if (currentMillis >= scene1stamp1 && currentMillis < scene1stamp2) {
        lcd.setCursor(0, 1);
        lcd.print("Action 1 running...");
        Serial.println("Scene 1: Action 1 executed.");
        updateBlinkingPixel(3, 0, 50, 0);  // Blink pixel 1 with GREEN color
        console_fade();
        // Fade only after a specified time has passed
      }

      // Second 5000ms action
      if (currentMillis >= scene1stamp2 && currentMillis < scene1stamp3) {
        lcd.setCursor(0, 1);
        lcd.print("Action 2 running...");
        Serial.println("Scene 1: Action 2 executed.");
         updateBlinkingPixel(3, 0, 50, 0);  // Blink pixel 1 with GREEN color
        timecircuit_flicker();
        machine.setPixelColor(1, 255, 255, 0);    // Set the pixel color      //gauge 1
        machine.setPixelColor(2, 255, 255, 255);  // Set the pixel color      // gauge 2
        machine.setPixelColor(18, 0, 255, 0);     // Set the pixel color      // door open
        machine.setPixelColor(19, 0, 255, 0);     // Set the pixel color      // door open
        machine.setPixelColor(20, 0, 255, 0);     // Set the pixel color      // door open
        machine.setPixelColor(21, 0, 255, 0);     // Set the pixel color      // door open
        machine.show();
        twentyfive();
      }
      // Third 5000ms action
      if (currentMillis >= scene1stamp3 && currentMillis < scene1stamp4) {
        lcd.setCursor(0, 1);
        lcd.print("Action 3 running...");
        Serial.println("Scene 1: Action 3 executed.");
        timecircuit_flicker();
        machine.setPixelColor(0, 255, 255, 255);  // steam on
        machine.show();
        digitalWrite(RELAY1_PIN, HIGH);
        updateBlinkingPixel(3, 0, 50, 0);  // Blink pixel 1 with GREEN color
      }


      // fourth 5000ms action
      if (currentMillis >= scene1stamp4 && currentMillis < scene1stamp5) {
        lcd.setCursor(0, 1);
        lcd.print("Action 4 running...");
        Serial.println("Scene 1: Action 4 executed.");
        timecircuit_flicker();
        machine.setPixelColor(0, 0, 0, 0);  // steam off
        machine.show();
        digitalWrite(RELAY1_PIN, LOW);
        updateBlinkingPixel(3, 0, 50, 0);  // Blink pixel 1 with GREEN color
      }
      // fifth 5000ms action
      if (currentMillis >= scene1stamp5 && currentMillis < scene1stamp6) {
        lcd.setCursor(0, 1);
        lcd.print("Action 5 running...");
        Serial.println("Scene 1: Action 5 executed.");
        timecircuit_flicker();
        updateBlinkingPixel(3, 0, 50, 0);  // Blink pixel 1 with GREEN color
      }

      // sixth 5000ms action
      if (currentMillis >= scene1stamp6 && currentMillis < scene1stamp7) {
        lcd.setCursor(0, 1);
        lcd.print("Action 6 running...");
        Serial.println("Scene 1: Action 6 executed.");
        timecircuit_flicker();
        updateBlinkingPixel(3, 0, 50, 0);  // Blink pixel 1 with GREEN color
      }

      // Enter idle state after 8000ms with no input
      if (currentMillis >= scene1stamp7 && currentMillis < idleStart) {
        lcd.setCursor(0, 1);
        lcd.print("Waiting for input...");
        Serial.println("Scene 1: Waiting for input.");
        timecircuit_flicker();
        updateBlinkingPixel(3, 0, 0, 50);  // Blink pixel 1 with GREEN color
      }

      // Check for emergency stop
      handleEmergencyStop();
      if (emergencyStopActive && scene1Active) {
        Serial.println("Emergency Stop triggered");
        display.setPixelColor(1, 255, 0, 0);  // Pixel update
        display.show();


        return;  // Exit the Scene 1 logic
      }

      
    }

    lcd.clear();
    lcd.print("Idle State");
    flickerSpeed = 900;
    Serial.println("Scene 1: Entering idle state.");
    timecircuit_flicker();
    updateBlinkingPixel(1, 0, 0, 255);  // Blink pixel 1 with blue color
    IDLE();
    if (!scene1Active) {
      updateBlinkingPixel(3, 255, 0, 0);  // Blink pixel 1 with red color
    }
  }
}

// Function to initialize or reinitialize the SD card
bool initializeSDCard() {
    return sd.begin(SdSpiConfig(SD_CS, SHARED_SPI));
}
/*******************************************************buzzer sounds*************************************************************************
S_CONNECTION 
S_DISCONNECTION 
S_BUTTON_PUSHED
S_MODE1 
S_MODE2 
S_MODE3
S_SURPRISE
S_OHOOH 
S_OHOOH2
S_CUDDLY
S_SLEEPING
S_HAPPY
S_SUPER_HAPPY 
S_HAPPY_SHORT
S_SAD
S_CONFUSED 
S_FART1 
S_FART2
S_FART3
S_JUMP 20

*******************************************************         SETUP    ***********************************************************************/

void setup() {
  Serial.begin(9600);
  display.begin();
  display.clear();
  display.show();
  cute.init(BUZZER_PIN);
      cute.play(S_BUTTON_PUSHED);
  pinMode(TFT_BACKLIGHT_PIN, OUTPUT);
    pinMode(BLUETOOTH_PIN, OUTPUT); 
     // Initialize SPI-based devices
 // pinMode(SD_CS, OUTPUT);
 // pinMode(ETHERNET_CS, OUTPUT);
 // pinMode(TFT_CS, OUTPUT);

  display.setPixelColor(0, 0, 255, 0);  // Change color to green
  display.setPixelColor(1, 255, 0, 0);  // Pixel update
  display.show();

  digitalWrite(BLUETOOTH_PIN, LOW); // Start with Bluetooth off
  bluetoothEnabled = false;        // Initialize as disabled
   
    // Initialize DMX communication
   DmxSimple.usePin(2);
  DmxSimple.maxChannel(SMOKE_MACHINE_CHANNEL);

  // Set the smoke machine channel to OFF initially
  DmxSimple.write(SMOKE_MACHINE_CHANNEL, 0);



Ethernet.init(ETHERNET_CS); // Use custom Chip Select pin
//if (Ethernet.begin(mac) == 0) {
 // Serial.println("Ethernet failed to initialize.");
//}

  // Initialize displays
  lcd.init();
  lcd.backlight();
  lcd.print("SHOWDUINO- 1.9");
  lcd.setCursor(2, 1);
  lcd.print("STARTING ....");
  Serial.println("            SHOWDUINO!!    -        the Arduino Controlled Show Controller   ");


  // Initialize TFT display
  tft.initR(INITR_BLACKTAB);  // Initialize TFT with the "black tab" configuration
  tft.fillScreen(ST77XX_BLACK);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(1);
  tft.setCursor(0, 0);
  analogWrite(TFT_BACKLIGHT_PIN, 120); // Set brightness (0-255)
  tft.println("Initializing...");


    // Try to initialize SD card
    if (initializeSDCard()) {
        Serial.println("SD card initialized successfully.");
        
     tft.println("SD card initialized");
      tft.println("Successfully");
        sdCardInserted = true;
    } else {
        Serial.println("SD card initialization failed!");
         tft.println("SD card REMOVED");
     
        sdCardInserted = false;
    }
    
    


    // Test file reading
    File file = sd.open("example.txt", FILE_READ);
    if (file) {
        Serial.println("Reading from SD card:");
        while (file.available()) {
            Serial.write(file.read());
        }
        file.close();
    } else {
        Serial.println("Failed to open file!");
    }



     Bluetooth.begin(9600);       // Start communication with HC-05

  Serial.println("Initializing bluetooth module");
  if (!checkBluetooth()) {
    Serial.println("Bluetooth present -  NOT ENABLED");
  }
  
 


  // Initialize MP3 players
  mp3_ambient.begin(9600);
  mp3_machine.begin(9600);

  mp3_ambient.sendCommand(CMD_SEL_DEV, 0, 2);  //select sd-card
  mp3_machine.sendCommand(CMD_SEL_DEV, 0, 2);  //select sd-card
  

  oledscreen.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
  oledscreen.clearDisplay();
  oledscreen.setTextSize(1);  // Draw 2X-scale text
  oledscreen.setTextColor(SSD1306_WHITE);
  oledscreen.setCursor(0, 0);
  // NEW LINE             NEW LINE             NEW LINE             NEW LINE             NEW LINE             NEW LINE
  oledscreen.println(F("SHOWDUINO ver 1.9    BUILD 11.2.0.1                            Toby Brandon         TEST LINE            TEST LINE"));
  oledscreen.display();  // Show initial text

  // Initialize NeoPixels
  machine.begin();
  machine.clear();
  machine.show();

  time_circuits.begin();
  time_circuits.clear();
  time_circuits.show();

  pixels.begin();
  pixels.clear();
  pixels.show();

  time_display.begin();
  time_display.clear();
  time_display.show();


  // while (!Serial) {
   //  ;  // Wait for serial port to connect (for native USB ports)
  // }

  

  // Start the Ethernet connection
  Ethernet.begin(mac, ip);
  // Start the server
  server.begin();
  // Initialize serial for debugging
  Serial.begin(9600);
  Serial.print("Server is at ");
  Serial.println(Ethernet.localIP());
  
  Serial.println("Ethernet initialized.");
  oledscreen.clearDisplay();
  oledscreen.setTextSize(1);  // Draw 2X-scale text
  oledscreen.setTextColor(SSD1306_WHITE);
  oledscreen.setCursor(0, 0);
  // Display initial screen content
  oledscreen.println(F("SHOWDUINO ver 1.9"));
  oledscreen.println(F("BUILD 11.2.0.1"));
  oledscreen.println(F("Toby Brandon"));
  oledscreen.println(F("SERVER IS AT"));
  oledscreen.println(Ethernet.localIP());  // Dynamic IP display
  oledscreen.display();




     // Deactivate TFT initially

  // Initialize buttons and relays
  pinMode(BUTTON_START, INPUT_PULLUP);
  pinMode(BUTTON_EMERGENCY, INPUT_PULLUP);
  pinMode(BUTTON_RESET, INPUT_PULLUP);
  pinMode(BUTTON_SCENE_1, INPUT_PULLUP);
  pinMode(BUTTON_SCENE_2, INPUT_PULLUP);
  pinMode(BUTTON_SCENE_3, INPUT_PULLUP);
  pinMode(BUTTON_SCENE_4, INPUT_PULLUP);
  pinMode(BUTTON_SCENE_5, INPUT_PULLUP);
  pinMode(BUTTON_SCENE_6, INPUT_PULLUP);
  pinMode(BUTTON_SCENE_7, INPUT_PULLUP);
  pinMode(BUTTON_SCENE_8, INPUT_PULLUP);
  pinMode(BUTTON_SCENE_9, INPUT_PULLUP);
  pinMode(BUTTON_SCENE_10, INPUT_PULLUP);

  pinMode(ONESHOT1, INPUT_PULLUP);
  pinMode(ONESHOT2, INPUT_PULLUP);
  pinMode(ONESHOT3, INPUT_PULLUP);
  pinMode(ONESHOT4, INPUT_PULLUP);

  pinMode(RELAY1_PIN, OUTPUT);
  pinMode(RELAY2_PIN, OUTPUT);
  pinMode(RELAY3_PIN, OUTPUT);
  pinMode(RELAY4_PIN, OUTPUT);
  pinMode(RELAY5_PIN, OUTPUT);
  pinMode(RELAY6_PIN, OUTPUT);
  pinMode(RELAY7_PIN, OUTPUT);
  pinMode(RELAY8_PIN, OUTPUT);



  // Start scrolling
  startMillis = millis();  // Record the start time
  while (millis() - startMillis < scrollDuration) {
    if (millis() - previousMillis >= scrollInterval) {
      previousMillis = millis();
      lcd.setCursor(0, 0);  // Set the cursor to the first row, first column
      lcd.print(message.substring(scrollPosition, scrollPosition + 16));
      scrollPosition++;
      if (scrollPosition > message.length() - 16) {
        scrollPosition = 0;  // Reset scroll position
      }
    }
  }


 
  pinMode(CLK_PIN, INPUT_PULLUP);
pinMode(DT_PIN, INPUT_PULLUP);
pinMode(SW_PIN, INPUT_PULLUP);
  encoder.write(0);              // Initialize encoder position to 0
    digitalWrite(RELAY1_PIN, HIGH); //  relay off
    digitalWrite(RELAY2_PIN, HIGH); //  relay off
    digitalWrite(RELAY3_PIN, HIGH); //  relay off
    digitalWrite(RELAY4_PIN, HIGH); //  relay off
    digitalWrite(RELAY5_PIN, HIGH); //  relay off
    digitalWrite(RELAY6_PIN, HIGH); //  relay off
    digitalWrite(RELAY7_PIN, HIGH); //  relay off
    digitalWrite(RELAY8_PIN, HIGH); //  relay off
 



  lcd.clear();
  lcd.print("System Ready");
   displayMainMenu();
  lcd.setCursor(0, 1);
  lcd.print("Waiting");
    Serial.println("SYSTEM WAITING");
  oledscreen.clearDisplay();
  oledscreen.drawBitmap(0, 0, image_data_chamber_logo, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
  oledscreen.display();
  updateBlinkingPixel(1, 0, 0, 255);  // Blink pixel 1 with blue color

}


void loop() {
 
  static int lastPos = -1; // Track last encoder position
int pos = encoder.read() / 2; // Adjust sensitivity if needed
     
  /*   8888888888888888888888888888888888888888888           main menu Navigation                      8888888888888888888888888888888888888888888888*/
  

    if (currentMenu == 0) {
    // Main Menu Navigation
    if (pos != lastPos) {
      if (pos > lastPos) {
        menuOption++;
        if (menuOption >= 4) { // Updated to 5 main menu options
          menuOption = 0; // Wrap around to the first option
        }
      } else if (pos < lastPos) {
        menuOption--;
        if (menuOption < 0) {
          menuOption = 3; // Wrap around to the last option
        }
      }
      lastPos = pos;
      displayMainMenu(); // Update the main menu display
    }
  } else if (currentMenu == 1) {
    // Submenu Navigation
    switch (menuOption) {
      case 0: currentSubMenu = subMenu1Options; break;
      case 1: currentSubMenu = subMenu2Options; break;
      case 2: currentSubMenu = subMenu3Options; break;
      case 3: currentSubMenu = subMenu4Options; break;
    }

    if (pos != lastPos) {
      if (pos > lastPos) {
        subMenuOption++;
        if (subMenuOption >= submenuSize) {
          subMenuOption = 0; // Wrap around
        }
      } else if (pos < lastPos) {
        subMenuOption--;
        if (subMenuOption < 0) {
          subMenuOption = submenuSize - 1; // Wrap around
        }
      }
      lastPos = pos;
      displaySubMenu(currentSubMenu, submenuSize); // Display appropriate submenu
    }
  }

  // Handle Button Press
  if (digitalRead(SW_PIN) == LOW && !buttonPressed) {
    buttonPressed = true;

    if (currentMenu == 0) {
      // Main menu: Select and navigate to submenu or perform action
      if (menuOption < 4) { // Navigate to submenus for options 0 to 3
        currentMenu = 1; // Enter submenu
        subMenuOption = 0; // Reset submenu option
        displaySubMenu(currentSubMenu, submenuSize); // Display submenu
      } 
    } else if (currentMenu == 1) {
      // Submenu: Trigger actions or navigate back
      switch (menuOption) {
        case 0:   // BLUETOOTH SETTINGS
          if (subMenuOption == 0) toggleBluetooth();
          else if (subMenuOption == 1) bluetoothinfo();
          else if (subMenuOption == 2) pairingMode(); // Define this function
          else if (subMenuOption == 3) {
            currentMenu = 0;
            displayMainMenu();
          }
          break;

        case 1: // Display Settings submenu 1 
          if (subMenuOption == 0) adjustBrightness(); // Define this function
          else if (subMenuOption == 1) adjustContrast(); // Define this function
          else if (subMenuOption == 2) changeColorMode(); // Define this function
          else if (subMenuOption == 3) {
            currentMenu = 0;
            displayMainMenu();
          }
          break;

        case 2: // Sound Options submenu
          if (subMenuOption == 0) adjustVolume(); // Define this function
          else if (subMenuOption == 1) setEqualizer(); // Define this function
          else if (subMenuOption == 2) soundTest(); // Define this function
          else if (subMenuOption == 3) {
            currentMenu = 0;
            displayMainMenu();
          }
          break;

        case 3: // System Info submenu
          if (subMenuOption == 0) displayIPConfig(); // Define this function
          else if (subMenuOption == 1) displayMACAddress(); // Define this function
          else if (subMenuOption == 2) runDiagnostics(); // Define this function
          else if (subMenuOption == 3) {
            currentMenu = 0;
            displayMainMenu();
          }
          break;
      }
    }

    delay(200); // Debounce delay
  }

  // Reset buttonPressed when button is released
  if (digitalRead(SW_PIN) == HIGH) {
    buttonPressed = false;
  }



/*   88888888888888888888888888888888888888888888888888         bluetooth       8888888888888888888888888888888888888888888888888888888888888888*/

  // Send data from Serial Monitor to Bluetooth
  if (Serial.available()) {
    char data = Serial.read();
    Bluetooth.write(data);
  }

  // Receive data from Bluetooth
  if (Bluetooth.available()) {
    char data = Bluetooth.read();
    Serial.write(data);

    // Example action based on received data
    if (data == '1') {
      Serial.println("Relay 1 ON");
     // Turn smoke machine ON
  DmxSimple.write(SMOKE_MACHINE_CHANNEL, 255);
  delay(5000);
    } else if (data == '0') {
       // Turn the smoke machine OFF
  DmxSimple.write(SMOKE_MACHINE_CHANNEL, 0);
      Serial.println("Relay 1 OFF");
    }
  }
 
/*   88888888888888888888888888888888888888888888888888             ethernet         8888888888888888888888888888888888888888888888888888888888888*/

  // Check Ethernet connection status
  if (Ethernet.hardwareStatus() != EthernetNoHardware) {
    if (Ethernet.linkStatus() == LinkON && !ethernetConnected) {
      // Connection was re-established
      ethernetConnected = true;
      cute.play(S_CONNECTION);
      Serial.println("Ethernet connection re-established.");

      // Update OLED with the new status
      oledscreen.clearDisplay();
      oledscreen.setTextSize(1);
      oledscreen.setCursor(0, 0);
      oledscreen.println(F("SERVER IS AT"));
      oledscreen.println(Ethernet.localIP());
      oledscreen.display();
    } else if (Ethernet.linkStatus() != LinkON && ethernetConnected) {
      // Connection lost
      ethernetConnected = false;
      Serial.println("Ethernet connection lost.");
      cute.play(S_DISCONNECTION);
      // Optionally update OLED to reflect the lost connection
      oledscreen.clearDisplay();
      oledscreen.setTextSize(1);
      oledscreen.setCursor(0, 0);
      oledscreen.println(F("Ethernet disconnected!"));
      oledscreen.display();
    }
  }
/*   88888888888888888888888888888888888888888888888888888        one shots        8888888888888888888888888888888888888888888888888888888888888888*/

  updateBlinkingPixel(1, 0, 0, 255);  // Blink pixel 1 with blue color
  // Check ONESHOT1
  shot1State = digitalRead(ONESHOT1);
  if (shot1State != lastButtonState1) {
    if (shot1State == LOW) {
      Serial.println("ONESHOT1 Pressed");
      oledscreen.setTextSize(2);         // Set the text size before rendering
      animateExplodingText("SHOT ONE");  // Pass the actual string as the argument
digitalWrite(RELAY1_PIN, HIGH); // Start with relay off


    } else {
      Serial.println("ONESHOT1 Released");
      oledscreen.clearDisplay();
      oledscreen.drawBitmap(0, 0, image_data_chamber_logo, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
      oledscreen.display();
    }
    lastButtonState1 = shot1State;
  }

  // Check ONESHOT2
  shot2State = digitalRead(ONESHOT2);
  if (shot2State != lastButtonState2) {
    if (shot2State == LOW) {
      Serial.println("ONESHOT2 Pressed");
      oledscreen.setTextSize(2);         // Set the text size before rendering
      animateExplodingText("SHOT TWO");  // Pass the actual string as the argument



    } else {
      Serial.println("ONESHOT2 Released");
      oledscreen.clearDisplay();
      oledscreen.drawBitmap(0, 0, image_data_chamber_logo, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
      oledscreen.display();
    }
    lastButtonState2 = shot2State;
  }

  // Check ONESHOT3
  shot3State = digitalRead(ONESHOT3);
  if (shot3State != lastButtonState3) {
    if (shot3State == LOW) {
      Serial.println("ONESHOT3 Pressed");
      oledscreen.setTextSize(2);           // Set the text size before rendering
      animateExplodingText("SHOT THREE");  // Pass the actual string as the argument


    } else {
      Serial.println("ONESHOT3 Released");
      oledscreen.clearDisplay();
      oledscreen.drawBitmap(0, 0, image_data_chamber_logo, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
      oledscreen.display();
    }
    lastButtonState3 = shot3State;
  }

  // Check ONESHOT4
  shot4State = digitalRead(ONESHOT4);
  if (shot4State != lastButtonState4) {
    if (shot4State == LOW) {
      Serial.println("ONESHOT4 Pressed");
      oledscreen.setTextSize(2);          // Set the text size before rendering
      animateExplodingText("SHOT FOUR");  // Pass the actual string as the argument


    } else {
      Serial.println("ONESHOT4 Released");
      oledscreen.clearDisplay();
      oledscreen.drawBitmap(0, 0, image_data_chamber_logo, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
      oledscreen.display();
    }
    lastButtonState4 = shot4State;
  }

  delay(50);  // Small debounce delay to avoid rapid state changes

  // Check emergency stop first to override everything
  handleEmergencyStop();

  // Handle reset to recover from emergency or restart
  handleReset();

  // Handle other buttons and scenes
  handleStartButton();
  handleScenes();

}





