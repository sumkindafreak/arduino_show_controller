#include <SerialMP3Player.h>
#include <Adafruit_NeoPixel.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <CuteBuzzerSounds.h>

/* track listings for ambient player

1 - victorian london
2 - machine ambience
3 - guns
4 - warning
5 - tension
6 - rainforest
7 - electric
8 - machine travelling
9 - machine break
10 - radio 1
11 - radio 2
12 - radio 3
13 - radio 4
14 - radio 5
15 - radio 6
16 - radio 7
17   - radio 8
18   - radio 9 
19   - radio 10
20    - dinosaur roar
21    - machine boot up
 22   - whales

*/

// Pin definitions for MP3 players
#define TX 12
#define RX 11
#define TE 38
#define RE 37

SerialMP3Player mp3_ambient(RX, TX);
SerialMP3Player mp3_machine(RE, TE);

/* track listings for ambient player

1 - MACHNE AMBIENCE
2- VICTORIAN LONDON
3- WHALES
4- 
5 -MACHINE BOOT UP
6 - DINO ROAR
7 - radio - POWER BACK
8 - radio - losing control/power
9 - radio - paradox lock fail
10 - radio - 5010 pressure readings
11 - radio - 0000
12 - radio - close blast shield
13 - radio - remote control
14 - radio - remain in contact
15 - MACHINE FAIL 
16 - TRAVELLING 
17 - GUNS
18 - WARNING
19 - ELECTRIC
20 - RAINFOREST
21 - TENTION
22 - 


*/




// Pin definitions for NeoPixel
#define PIN 22
#define NUMmachine 100
Adafruit_NeoPixel machine(NUMmachine, PIN, NEO_GRB + NEO_KHZ800);

#define NUMBERS 23
#define DISP 100
Adafruit_NeoPixel time_display(DISP, NUMBERS, NEO_GRB + NEO_KHZ800);

#define CAN 24
#define NUM_CANDLES 3
#define NUM_PIXELS_PER_CANDLE 3
#define NUM_PIXELS (NUM_CANDLES * NUM_PIXELS_PER_CANDLE)
Adafruit_NeoPixel pixels(NUM_PIXELS, CAN, NEO_GRB + NEO_KHZ800);

// Which pin on the Arduino is connected to the time circuits?
#define circuits 30
// How many Neomachine are attached to the Arduino?
#define circ 100  // Popular NeoPixel ring size
Adafruit_NeoPixel time_circuits(circ, circuits, NEO_GRB + NEO_KHZ800);


// Which pin on the Arduino is connected to the time circuits?
#define indicators 31
// How many Neomachine are attached to the Arduino?
#define indicate 100  // Popular NeoPixel ring size
Adafruit_NeoPixel Display(indicate, indicators, NEO_GRB + NEO_KHZ800);


// Button pin definitions
const int startbutton = 8;
const int emergency_stop = 9;
const int resetButton = 10;

// Scene pin led definitions
const int SC1 = 7;
const int SC2 = 6;
const int SC3 = 5;
const int SC4 = 4;
const int SC5 = 3;
const int SC6 = 2;

// relay pin definitions

const int relay1 = 26;  //relay1
const int relay2 = 27;  //relay2
const int relay3 = 28;  //relay3
const int relay4 = 29;  //relay4
const int relay5 = 32;  //relay1
const int relay6 = 33;  //relay2
const int relay7 = 34;  //relay3
const int relay8 = 35;  //relay4


// extras pin definitions
#define BUZZER_PIN 36



// Timing variables
unsigned long startMillis = 0;
bool machineStarted = false;
bool emergencyStopActive = false;
bool scene1 = false;
bool scene2 = false;
bool scene3 = false;
bool scene4 = false;
bool scene5 = false;
bool scene6 = false;
bool scene7 = false;
bool scene8 = false;
bool scene9 = false;

bool scene1Active = false;
bool scene2Active = false;
bool scene3Active = false;
bool scene4Active = false;
bool scene5Active = false;
bool scene6Active = false;
bool scene7Active = false;
bool scene8Active = false;
bool scene9Active = false;

bool scene2_1 = false;
bool scene6_1 = false;

bool waiting = false;
bool waitingActive = false;


bool isshocking = false;
bool bombs = false;
bool circuit_flick = false;
bool istravelling = false;

// Time flashing variables

bool flash1Printed = false;
bool flash2Printed = false;
bool flash3Printed = false;
bool flash4Printed = false;
bool flash5Printed = false;
bool flash6Printed = false;

bool Printed1 = false;
bool Printed2 = false;
bool Printed3 = false;
bool Printed4 = false;
bool Printed5 = false;
bool Printed6 = false;
bool Printed7 = false;
bool Printed8 = false;
bool Printed9 = false;



bool flash7Printed = false;
bool flash8Printed = false;
bool flash9Printed = false;



bool scene3Waiting = false;
bool scene4Waiting = false;
bool scene5Waiting = false;
bool scene6Waiting = false;
bool scene7Waiting = false;
bool scene8Waiting = false;
bool scene9Waiting = false;

bool isPixelOn = false;

bool ambient_tracks[25] = { false };  // Initialize all to false
bool machine_tracks[25] = { false };  // Initialize all to false




unsigned long previousMillis = 0;
unsigned long interval = random(50, 200);  // Random interval between updates

int twinkle = 150;
int fliker = 25;
int timefliker = 20;
int electric = 70;
const long fade_time = 5000;  //console fade in time


// I2C LCD setup
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Change 0x27 to your LCD I2C address if different


int flickerSpeed = 500;  // Speed of the flicker in milliseconds

void timecircuit_flicker() {
  unsigned long currentMillis = millis();

  // Check if the desired time has passed to update the LEDs
  if (currentMillis - previousMillis >= flickerSpeed) {
    previousMillis = currentMillis;  // Update the time for the next interval

    // Update all pixels with new random colors
    for (int i = 0; i < time_circuits.numPixels(); i++) {
      time_circuits.setPixelColor(i, time_circuits.Color(random(256), random(256), random(256)));
    }
    time_circuits.show();  // Update the LEDs with the new colors
  }
}


void console_flikr() {
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= fliker) {
    previousMillis = currentMillis;
    for (int i = 11; i <= 14; i++) {
      if (random(10) == 0) {
        machine.setPixelColor(i, 255, 255, 255);

      } else {
        machine.setPixelColor(i, 0, 0, 0);
      }
    }
    machine.show();
  }
}
void shocking() {
  unsigned long currentMillis = millis();
  if (machine_tracks[7]) {      // Note: Track 21 is at index 20 in a zero-based array
    mp3_machine.play(21);       // electric
    machine_tracks[7] = false;  // Set to false to prevent re-playing
  }
  if (currentMillis - previousMillis >= electric) {
    previousMillis = currentMillis;
    for (int i = 0; i < 20; i++) {
      machine.setPixelColor(i, 255, 255, 255);
    }

    delay(50);
    machine.clear();
    machine.show();

    if (currentMillis - previousMillis >= electric) {
      previousMillis = currentMillis;
      for (int i = 0; i < 20; i++) {
        time_display.setPixelColor(i, 255, 255, 255);
      }
      for (int i = 1; i < 50; i++) {
        machine.setPixelColor(i, 255, 255, 255);
      }
      time_display.show();
      machine.show();
      delay(50);
      time_display.clear();
      machine.clear();
      time_display.show();
      machine.show();
    }
  }
}

void twink() {
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= twinkle) {
    previousMillis = currentMillis;
    for (int i = 15; i < 20; i++) {
      if (random(10) == 0) {
        machine.setPixelColor(i, 255, 255, 255);

      } else {
        machine.setPixelColor(i, 0, 0, 0);
      }
    }
    machine.show();
  }
}

void twentyfive() {

  //5
  // time_display.setPixelColor(0, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(1, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(2, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(3, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(4, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(5, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(6, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/
  //2

  time_display.setPixelColor(7, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(8, 255, 0, 0);   // Set the pixel color
                                              // time_display.setPixelColor(9, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(10, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(11, 255, 0, 0);  // Set the pixel color
                                              // time_display.setPixelColor(12, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(13, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/
  //0

  time_display.setPixelColor(14, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(15, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(16, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(17, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(18, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(19, 255, 0, 0);  // Set the pixel color
                                              //  time_display.setPixelColor(20, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/
  //2

  time_display.setPixelColor(21, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(22, 255, 0, 0);
  //time_display.setPixelColor(23, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(24, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(25, 255, 0, 0);  // Set the pixel color
                                              // time_display.setPixelColor(26, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(27, 255, 0, 0);  // Set the pixel color

  time_display.show();
}


void five_ten() {

  time_display.setPixelColor(0, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(1, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(2, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(3, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(4, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(5, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(6, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(7, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(8, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(9, 255, 0, 0); // Set the pixel color
  //  time_display.setPixelColor(10, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(11, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(12, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(13, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(14, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(15, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(16, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(17, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(18, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(19, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(20, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/
  //5

  //time_display.setPixelColor(21, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(22, 255, 0, 0);
  time_display.setPixelColor(23, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(24, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(25, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(26, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(27, 255, 0, 0);  // Set the pixel color

  time_display.show();
}


void zero() {

  time_display.setPixelColor(0, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(1, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(2, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(3, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(4, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(5, 255, 0, 0);  // Set the pixel color
  //time_display.setPixelColor(6, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(7, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(8, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(9, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(10, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(11, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(12, 255, 0, 0);  // Set the pixel color
  //  time_display.setPixelColor(13, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(14, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(15, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(16, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(17, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(18, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(19, 255, 0, 0);  // Set the pixel color
  //  time_display.setPixelColor(20, 255, 0, 0); // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(21, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(22, 255, 0, 0);
  time_display.setPixelColor(23, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(24, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(25, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(26, 255, 0, 0);  // Set the pixel color
  //  time_display.setPixelColor(27, 255, 0, 0); // Set the pixel color

  time_display.show();
}

void ninefourtwo() {

  time_display.setPixelColor(0, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(1, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(2, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(3, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(4, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(5, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(6, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(7, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(8, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(9, 255, 0, 0);  // Set the pixel color
  //  time_display.setPixelColor(10, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(11, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(12, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(13, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(14, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(15, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(16, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(17, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(18, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(19, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(20, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(21, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(22, 255, 0, 0);
  //  time_display.setPixelColor(23, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(24, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(25, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(26, 255, 0, 0);  // Set the pixel color
  //   time_display.setPixelColor(27, 255, 0, 0); // Set the pixel color

  time_display.show();
}

void oneeightfourtwo() {

  time_display.setPixelColor(0, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(1, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(2, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(3, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(4, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(5, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(6, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(7, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(8, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(9, 255, 0, 0);   // Set the pixel color
  time_display.setPixelColor(10, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(11, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(12, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(13, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(14, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(15, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(16, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(17, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(18, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(19, 255, 0, 0);  // Set the pixel color
  time_display.setPixelColor(20, 255, 0, 0);  // Set the pixel color

  /*------------------------------------------------------------*/


  time_display.setPixelColor(21, 255, 0, 0);  // Set the pixel color
  // time_display.setPixelColor(22, 255, 0, 0);
  //  time_display.setPixelColor(23, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(24, 255, 0, 0); // Set the pixel color
  // time_display.setPixelColor(25, 255, 0, 0); // Set the pixel color
  time_display.setPixelColor(26, 255, 0, 0);  // Set the pixel color
  //   time_display.setPixelColor(27, 255, 0, 0); // Set the pixel color

  time_display.show();
}


void time_flikr() {
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= timefliker) {
    previousMillis = currentMillis;
    for (int i = 0; i <= 30; i++) {
      if (random(10) == 0) {
        time_display.setPixelColor(i, 255, 255, 255);

      } else {
        time_display.setPixelColor(i, 0, 0, 0);
      }
    }
    time_display.show();
  }
}

void console_fade() {
  unsigned long currentMillis = millis();

  // Fade only after a specified time has passed
  if (currentMillis - previousMillis >= fade_time) {
    previousMillis = currentMillis;

    // Smooth fade from black (0) to full brightness (255)
    for (int brightness = 0; brightness <= 255; brightness++) {  // Change direction of the loop
      for (int i = 11; i <= 17; i++) {
        // Set color with the current brightness level (RGB values for white)
        machine.setPixelColor(i, machine.Color(brightness, brightness, brightness));
      }

      machine.show();  // Update LED colors only once after setting all pixels
      delay(70);       // Add a short delay for the fade effect to be visible
    }
  }
}
void console_fade_out() {
  unsigned long currentMillis = millis();

  // Fade only after a specified time has passed
  if (currentMillis - previousMillis >= fade_time) {
    previousMillis = currentMillis;

    // Smooth fade from full brightness (255) to black (0)
    for (int brightness = 255; brightness >= 0; brightness--) {
      for (int i = 11; i <= 17; i++) {
        // Set color with the current brightness level (RGB values for white)
        machine.setPixelColor(i, machine.Color(brightness, brightness, brightness));
      }

      machine.show();  // Update LED colors only once after setting all pixels
      delay(70);       // Add a short delay for the fade effect to be visible
    }
  }
}

void candles() {
  unsigned long currentMillis = millis();

  // Check if it's time to update the candle flicker
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    interval = random(30, 500);  // Update with a new random interval for flickering

    for (int i = 0; i < NUM_CANDLES; i++) {
      // Base color for a warm candle glow
      int redBase = random(180, 255);       // Base red value, higher for brightness
      int flickerOffset = random(-50, 50);  // Flicker variation
      int greenBase = redBase / 4;          // Smaller green value for a warm tone

      // Constrain values to ensure they stay within 0-255
      int red = constrain(redBase + flickerOffset, 0, 255);
      int green = constrain(greenBase + (flickerOffset / 2), 0, 255);

      // Set each LED in the candle to flicker
      for (int j = 0; j < NUM_PIXELS_PER_CANDLE; j++) {
        int pixelIndex = i * NUM_PIXELS_PER_CANDLE + j;
        pixels.setPixelColor(pixelIndex, pixels.Color(red, green, 0));
      }
    }
    pixels.show();  // Update the NeoPixels with the new colors
  }
}
// timing for scrolling text


const String message = "SHOWDUINO VER 0.1 - Toby Brandon  ";  // Message to scroll
const unsigned long scrollInterval = 200;                     // Scroll speed (milliseconds)
const unsigned long scrollDuration = 5000;                    // Total time to scroll (10 seconds)
int scrollPosition = 0;





const long FLASH_INTERVAL = 500;  // interval at which to blink (milliseconds)

void TIMER() {
  unsigned long currentMillis = millis();

  // Check if it's time to toggle the pixels
  if (currentMillis - previousMillis >= FLASH_INTERVAL) {
    previousMillis = currentMillis;  // Update previousMillis

    // Toggle each of the pixels in the range 18 to 21
    for (int i = 18; i <= 21; i++) {
      if (isPixelOn) {
        machine.setPixelColor(i, 0, 0, 0);  // Turn off the pixel
      } else {
        machine.setPixelColor(i, 255, 0, 0);  // Set the pixel to blue
      }
    }

    isPixelOn = !isPixelOn;  // Toggle pixel state
    machine.show();          // Update the pixel display
  }
}

unsigned long flickerInterval = 100;  // Initial flicker interval (adjust for desired glitch effect)
void glitchEffect() {
  unsigned long currentMillis = millis();

  // Update the pixels at random intervals
  if (currentMillis - previousMillis >= flickerInterval) {
    previousMillis = currentMillis;
    flickerInterval = random(50, 200);  // Set a new random interval for next update

    // Randomly decide whether to "glitch" or stay bright
    bool glitchOn = random(0, 10) > 5;  // 50% chance of being glitchy or bright

    // Set pixel colors based on glitch state
    if (glitchOn) {
      int red = random(180, 255);  // Bright color, but slightly random
      int green = random(180, 255);
      int blue = random(0, 50);                    // Lower blue to keep warm tone
      machine.setPixelColor(1, red, green, blue);  // Pixel 1 with glitch color
      machine.setPixelColor(2, red, green, blue);  // Pixel 2 with glitch color
    } else {
      int flickerBrightness = random(0, 100);                                             // Dim state or off for the glitch
      machine.setPixelColor(1, flickerBrightness, flickerBrightness, 0);                  // Dim yellow/orange
      machine.setPixelColor(2, flickerBrightness, flickerBrightness, flickerBrightness);  // Dim white
    }

    machine.show();  // Update the NeoPixel strip
  }
}
/*
 buzzer sounds
 
 S_CONNECTION   S_DISCONNECTION S_BUTTON_PUSHED   
 S_MODE1        S_MODE2         S_MODE3     
 S_SURPRISE     S_OHOOH         S_OHOOH2    
 S_CUDDLY       S_SLEEPING      S_HAPPY     
 S_SUPER_HAPPY  S_HAPPY_SHORT   S_SAD       
 S_CONFUSED     S_FART1         S_FART2     
 S_FART3        S_JUMP 20

 */
void setup() {
  // Initialize time tracking and hardware components
  startMillis = millis();
  Display.begin();
  lcd.begin(16, 2);
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Starting...");

  pinMode(relay1, OUTPUT);
  pinMode(relay2, OUTPUT);
  pinMode(relay3, OUTPUT);
  pinMode(relay4, OUTPUT);
  pinMode(relay5, OUTPUT);
  pinMode(relay6, OUTPUT);
  pinMode(relay7, OUTPUT);
  pinMode(relay8, OUTPUT);

  digitalWrite(relay5, LOW);
  digitalWrite(relay6, LOW);
  digitalWrite(relay7, LOW);
  digitalWrite(relay8, LOW);

  // Initialize serial and MP3 communication
  Serial.begin(9600);
  mp3_ambient.begin(9600);
  mp3_ambient.sendCommand(CMD_SEL_DEV, 0, 2);  // Select SD card for mp3_ambient
  mp3_ambient.setVol(30);
  mp3_ambient.stop();

  // Initialize the array elements to true
  for (int i = 0; i < 21; i++) {
    ambient_tracks[i] = true;  // Set each element to true
  }

  mp3_machine.begin(9600);
  mp3_machine.sendCommand(CMD_SEL_DEV, 0, 2);  // Select SD card for mp3_machine
  mp3_machine.setVol(30);
  mp3_machine.stop();
  // Initialize the array elements to true
  for (int i = 0; i < 21; i++) {
    machine_tracks[i] = true;  // Set each element to true
  }


  // Initialize LED displays
  machine.begin();
  machine.clear();
  machine.show();
  time_display.begin();
  time_display.clear();
  time_display.show();
  time_circuits.begin();
  time_circuits.clear();
  time_circuits.show();
  pixels.begin();
  pixels.clear();
  pixels.show();
  randomSeed(analogRead(0));  // Seed random numbers from a floating analog pin

  cute.init(BUZZER_PIN);
  cute.play(S_CONNECTION);
  delay(80);
  cute.play(S_CONNECTION);


  // Initialize all display colors to blue
  for (int i = 0; i < 4; i++) {
    Display.setPixelColor(i, 0, 0, 255);
  }
  Display.show();
  delay(200);  // Optional: delay before starting the sequence
  digitalWrite(relay1, HIGH);
  cute.play(S_BUTTON_PUSHED);
  Display.setPixelColor(0, 0, 255, 0);  // Change pixel to green
  Display.show();
  delay(200);  // Optional: delay before starting the sequence
  digitalWrite(relay2, HIGH);
  cute.play(S_BUTTON_PUSHED);
  digitalWrite(relay1, LOW);
  Display.setPixelColor(1, 0, 255, 0);  // Change pixel to green
  Display.show();
  delay(200);  // Optional: delay before starting the sequence
  digitalWrite(relay3, HIGH);
  cute.play(S_BUTTON_PUSHED);
  digitalWrite(relay2, LOW);
  Display.setPixelColor(2, 0, 255, 0);  // Change pixel to green
  Display.show();
  delay(200);  // Optional: delay before starting the sequence
  digitalWrite(relay4, HIGH);
  cute.play(S_BUTTON_PUSHED);
  digitalWrite(relay3, LOW);
  Display.setPixelColor(3, 0, 255, 0);  // Change pixel to green
  Display.show();
  delay(200);  // Optional: delay before starting the sequence
  digitalWrite(relay4, LOW);



  // Initialize pins for buttons and outputs
  pinMode(startbutton, INPUT_PULLUP);
  pinMode(emergency_stop, INPUT_PULLUP);
  pinMode(resetButton, INPUT_PULLUP);
  pinMode(SC1, INPUT_PULLUP);
  pinMode(SC2, INPUT_PULLUP);
  pinMode(SC3, INPUT_PULLUP);
  pinMode(SC4, INPUT_PULLUP);
  pinMode(SC5, INPUT_PULLUP);
  pinMode(SC6, INPUT_PULLUP);

  // Set flood lights and buzzer outputs





  lcd.setCursor(0, 1);
  lcd.print("Setup running");

  // Scroll message across LCD until setup complete
  Serial.println("showduino - The arduino show controller");
  Display.setPixelColor(5, 0, 255, 0);  // Change color to green
  Display.show();

  while (millis() - startMillis < scrollDuration) {
    if (millis() - previousMillis >= scrollInterval) {
      previousMillis = millis();
      lcd.setCursor(0, 0);
      lcd.print(message.substring(scrollPosition, scrollPosition + 16));
      scrollPosition++;
      if (scrollPosition > message.length() - 16) {
        scrollPosition = 0;
      }
    }
  }

  // Final setup message and preparation
  lcd.clear();
  lcd.setCursor(0, 1);
  lcd.print("setup complete");
  delay(1000);
  lcd.setCursor(0, 0);
  lcd.print("press start");
  cute.play(S_HAPPY_SHORT);

  for (int i = 0; i < 4; i++) {
    Display.setPixelColor(i, 0, 0, 0);
  }
  Display.show();
}

void loop() {

  unsigned long elapsedMillis = millis() - startMillis;


  bool startPressed = !digitalRead(startbutton);
  bool emergencyPressed = !digitalRead(emergency_stop);
  bool resetPressed = !digitalRead(resetButton);


  if (emergencyStopActive) {  // this will repeat until next action
    lcd.setCursor(0, 1);
    lcd.print("EMERGENCY STOP     ");
    Display.setPixelColor(5, 255, 0, 0);  // Set the pixel color
    circuit_flick = false;
    Display.show();
    // cute.play(S_MODE1);
  }

  if (isshocking) {
    shocking();
  }
  if (bombs) {
    twink();
  }

  if (circuit_flick) {
    timecircuit_flicker();
  }

  // Emergency stop logic
  if (emergencyPressed && !emergencyStopActive) {
    emergencyStopActive = true;
    isshocking = false;
    circuit_flick = false;
    bombs = false;
    mp3_ambient.stop();
    mp3_machine.stop();
    machine.clear();
    for (int i = 0; i <= 100; i++) {
      machine.setPixelColor(i, machine.Color(255, 255, 255));  // Green color
    }
    machine.show();
    time_display.clear();
    for (int i = 0; i <= 100; i++) {
      time_display.setPixelColor(i, time_display.Color(255, 255, 255));  // Green color
    }
    time_display.show();
    pixels.clear();
    for (int i = 0; i <= 24; i++) {
      pixels.setPixelColor(i, pixels.Color(255, 255, 255));  // Green color
    }
    pixels.show();
    time_circuits.clear();
    for (int i = 0; i <= 100; i++) {
      time_circuits.setPixelColor(i, time_circuits.Color(255, 255, 255));  // Green color
    }
    time_circuits.show();

    Serial.println("Emergency Stop Activated");
    Display.setPixelColor(4, 255, 0, 0);  // Set the pixel color
    Display.show();



    lcd.setCursor(0, 1);
    lcd.print("MACHINE: stopped");
    scene1 = false;
    scene2 = false;
    scene3 = false;
    scene4 = false;
    scene5 = false;
    scene6 = false;
    scene7 = false;
    istravelling = false;
    scene2_1 = false;
    flash1Printed = false;
    flash2Printed = false;
    flash3Printed = false;
    flash4Printed = false;
    flash5Printed = false;
    flash6Printed = false;
    flash7Printed = false;
    flash8Printed = false;
    flash9Printed = false;


    digitalWrite(relay1, LOW);
    digitalWrite(relay2, LOW);
    digitalWrite(relay3, LOW);
    digitalWrite(relay4, LOW);
    digitalWrite(relay5, LOW);
    digitalWrite(relay6, LOW);
    digitalWrite(relay7, LOW);
    digitalWrite(relay8, LOW);
  }

  // Reset button logic
  if (resetPressed && emergencyStopActive) {
    emergencyStopActive = false;
    circuit_flick = false;
    Serial.println("System Reset");
    lcd.setCursor(0, 1);
    lcd.print("System Reset     ");
    delay(1000);
    lcd.setCursor(0, 1);
    lcd.print("start/scene select   ");



    machine.clear();
    machine.show();
    time_display.clear();
    time_display.show();
    pixels.clear();
    pixels.show();
    time_circuits.clear();
    time_circuits.show();


    machineStarted = false;

    scene1 = false;
    scene2 = false;
    scene3 = false;
    scene4 = false;
    scene5 = false;
    scene6 = false;
    scene7 = false;
    scene8 = false;
    scene9 = false;

    scene1Active = false;
    scene2Active = false;
    scene3Active = false;
    scene4Active = false;
    scene5Active = false;
    scene6Active = false;
    scene7Active = false;
    scene8Active = false;
    scene9Active = false;


    scene2_1 = false;
    scene6_1 = false;

    isshocking = false;
    bombs = false;
    circuit_flick = false;
    istravelling = false;

    waiting = false;

    waitingActive = false;
    scene3Waiting = false;
    scene4Waiting = false;
    scene5Waiting = false;
    scene6Waiting = false;
    scene7Waiting = false;
    scene8Waiting = false;
    scene9Waiting = false;
    // Initialize the array elements to true
    for (int i = 0; i < 23; i++) {
      ambient_tracks[i] = true;  // Set each element to true
    }
    for (int i = 0; i < 23; i++) {
      machine_tracks[i] = true;  // Set each element to true
    }

    lcd.setCursor(0, 0);
    lcd.print("MACHINE: stopped");
  }

  // Start button logic
  if (startPressed && !machineStarted && !emergencyStopActive) {
    machineStarted = true;
    candles();
    mp3_ambient.setVol(25);
    startMillis = millis();
    if (ambient_tracks[20]) {  // Note: Track 21 is at index 20 in a zero-based array
      mp3_ambient.play(21);
      ambient_tracks[20] = false;  // Set to false to prevent re-playing
    }


    console_fade();
    Serial.println("console fade in");
    lcd.setCursor(0, 1);
    lcd.print("show starting  ");
    Serial.println("Machine Started");

    Display.setPixelColor(5, 0, 255, 0);  // Set the pixel color
    Display.show();
    lcd.setCursor(0, 0);
    lcd.print("MACHINE: running");
    Display.setPixelColor(4, 0, 0, 0);  // Set the pixel color
    Display.show();
  }

  // Check if machine is running
  if (machineStarted && !emergencyStopActive) {

    unsigned long currentMillis = millis();
    unsigned long elapsedMillis = currentMillis - startMillis;
    candles();
    // Scene 1: Activate after 8 seconds
    if (elapsedMillis >= 4000 && !scene1) {
      twentyfive();
      machine.setPixelColor(18, 0, 255, 0);  // Set the pixel color      // door open
      machine.setPixelColor(19, 0, 255, 0);  // Set the pixel color
      machine.setPixelColor(20, 0, 255, 0);  // Set the pixel color
      machine.setPixelColor(21, 0, 255, 0);  // Set the pixel color     // door open
      mp3_ambient.setVol(30);
      circuit_flick = true;
      scene1 = true;
      Display.setPixelColor(11, 0, 255, 0);  // Set the pixel color
      Display.show();

      Serial.println("Scene 1 Activated - machine start");
      machine.setPixelColor(1, 255, 255, 0);    // Set the pixel color
      machine.setPixelColor(2, 255, 255, 255);  // Set the pixel color
      for (int i = 3; i <= 10; i++) {
        machine.setPixelColor(i, machine.Color(0, 0, 0));  // Green color
      }
      machine.show();


      lcd.setCursor(0, 1);
      lcd.print("Scene 1 Active");
    }

    // Scene 2: Activate after 10 seconds
    if (elapsedMillis >= 34000 && !scene2) {

      scene2 = true;
      for (int i = 3; i <= 10; i++) {
        machine.setPixelColor(i, machine.Color(0, 255, 0));  // Green color
      }
      digitalWrite(relay4, HIGH);           // Turn the RELAY off
      Display.setPixelColor(3, 0, 255, 0);  // Set the pixel color
      Display.show();

      Display.setPixelColor(11, 0, 0, 0);    // Set the pixel color
      Display.setPixelColor(10, 0, 255, 0);  // Set the pixel color
      Display.show();
      Serial.println("Scene 2 Activated");

      machine.setPixelColor(0, 255, 255, 255);  // Set the pixel color
      machine.show();
      // Serial.println("Scene 1 Activated - machine start");
      lcd.setCursor(0, 1);
      lcd.print("Scene 2 Active");
    }

    // Scene 2-1: Activate after 12 seconds
    if (elapsedMillis >= 40000 && !scene2_1) {
      Serial.println("Scene 2-1 Activated");
      mp3_machine.play(16);
      scene2_1 = true;

      lcd.setCursor(0, 1);
      lcd.print("Scene 2-1 Active      ");
      machine.setPixelColor(0, 0, 0, 0);  // Set the pixel color
      machine.show();
      Display.setPixelColor(3, 0, 0, 0);  // Set the pixel color
      Display.show();

      digitalWrite(relay4, LOW);  // Turn the RELAY off
    }

    // Scene 3: Activate after 15 seconds
    if (elapsedMillis >= 48000 && !scene3) {
      mp3_machine.play(15);
      Display.setPixelColor(10, 0, 0, 0);   // Set the pixel color
      Display.setPixelColor(9, 0, 255, 0);  // Set the pixel color

      Display.show();

      scene3 = true;

      Serial.println("Scene 3 Activated");
      lcd.setCursor(0, 1);
      lcd.print("Scene 3 Active       ");
      for (int i = 10; i <= 17; i++) {
        machine.setPixelColor(i, machine.Color(0, 255, 0));  // Green color
      }
      machine.show();

      // Start the waiting period for Scene 3
      scene3Waiting = true;
      startMillis = millis();  // Reset the timer for the waiting period
    }
  }
  // Scene 3 waiting period: checks if 5 seconds have passed
  if (scene3Waiting && (millis() - startMillis >= 10000)) {

    mp3_machine.setVol(25);
    mp3_machine.play(14);

    scene3Waiting = false;
    flickerSpeed = 2000;
    Display.setPixelColor(5, 0, 255, 0);  // Set the pixel color
    Display.setPixelColor(9, 0, 0, 255);  // Set the pixel color
    Display.show();
    machine.setPixelColor(18, 0, 0, 255);  // Set the pixel color      // door locked
    machine.setPixelColor(19, 0, 0, 255);  // Set the pixel color
    machine.setPixelColor(20, 0, 0, 255);  // Set the pixel color
    machine.setPixelColor(21, 0, 0, 255);  // Set the pixel color     // door locked
    machine.show();
    lcd.setCursor(0, 0);
    lcd.print("sc3 waiting      ");
    Serial.println("Scene waiting");
  }




  // Scene 4: Activate with SC1 button
  if (!scene4Active && !digitalRead(SC1)) {
    machine.setPixelColor(18, 0, 0, 255);  // Set the pixel color      // door locked
    machine.setPixelColor(19, 0, 0, 255);  // Set the pixel color
    machine.setPixelColor(20, 0, 0, 255);  // Set the pixel color
    machine.setPixelColor(21, 0, 0, 255);  // Set the pixel color     // door locked
    machine.show();
    circuit_flick = true;
    mp3_machine.setVol(30);
    digitalWrite(relay1, LOW);  // Turn the RELAY Off
    scene4Active = true;
    time_circuits.clear();
    Display.setPixelColor(9, 0, 0, 0);    // Set the pixel color
    Display.setPixelColor(8, 0, 255, 0);  // Set the pixel color
    Display.show();
    startMillis = millis();  // Update the start time for scene 5
    Serial.println("Scene 4 Activated by SC1");

    lcd.setCursor(0, 0);
    lcd.print("MACHINE: running");
    lcd.setCursor(0, 1);
    lcd.print("sc4 travelling");
    istravelling = true;
    Display.clear();
    bombs = false;
    time_flikr();
    console_flikr();
  }

  // Running Scene 4 "travel to dino"
  if (scene4Active) {
    unsigned long scene4ElapsedTime = millis() - startMillis;
    if (ambient_tracks[7]) {      // Note: Track 21 is at index 20 in a zero-based array
      mp3_ambient.play(8);        // travelling sound this has to be played in machine sound( not ambient)
      ambient_tracks[7] = false;  // Set to false to prevent re-playing
    }
    if (scene4ElapsedTime >= 0) {
      lcd.setCursor(0, 1);
      lcd.print("travel to dino      ");
      Serial.println("travel to dino");
      flickerSpeed = 10;
      time_flikr();
      console_flikr();
      for (int i = 11; i <= 17; i++) {
        machine.setPixelColor(i, machine.Color(0, 0, 0));  // Green color
      }
      machine.setPixelColor(1, 255, 255, 0);    // Set the pixel color
      machine.setPixelColor(2, 255, 255, 255);  // Set the pixel color
      machine.show();
    }




    // End Scene 4 after 5 seconds
    if (scene4ElapsedTime >= 27500) {
      scene4Active = false;
      time_display.clear();
      zero();


      flickerSpeed = 1000;
      // time_flikr();
      // console_flikr();
      lcd.setCursor(0, 1);
      lcd.print("sc4 dino scene");
      machine.clear();
      for (int i = 1; i <= 2; i++) {
        machine.setPixelColor(i, machine.Color(0, 255, 0));  // Green color
      }
      for (int i = 11; i <= 17; i++) {
        machine.setPixelColor(i, machine.Color(0, 0, 255));  // Green color
      }
      machine.show();
      Serial.println("dino scene");
      delay(3000);                  // dirty wait so mp3 tracks can layer
      if (ambient_tracks[5]) {      // Note: Track 21 is at index 20 in a zero-based array
        mp3_ambient.play(6);        // rainforest/dino
        ambient_tracks[5] = false;  // Set to false to prevent re-playing
      }
      scene4 = true;
      Serial.println("Scene 4 Complete");
      // Start the waiting period for Scene 4

      //
      mp3_machine.play(13);    // radio year 0000
      startMillis = millis();  // Reset the timer for Scene 4 waiting period
      scene4Waiting = true;
    }
  }

  // Scene 4 waiting period after Scene 4 ends
  if (scene4Waiting && (millis() - startMillis >= 1000)) {  // Adjust waiting duration as needed
    delay(7000);
    mp3_machine.play(12);  // life forces)
    scene4Waiting = false;
    scene4Active = false;  // Deactivate Scene 4
    Serial.println("dino waiting scene");
    delay(3000);
    lcd.setCursor(0, 0);
    lcd.print("Sc4 waiting        ");
    Serial.println("Sc4 waiting");
    Display.setPixelColor(5, 0, 255, 0);  // Set the pixel color
    Display.setPixelColor(8, 0, 0, 255);  // Set the pixel color
    Display.show();
    delay(3000);
    mp3_machine.play(11);  // hold)
  }

  // Scene 5: Activate with SC2 button
  if (!scene5Active && !digitalRead(SC2)) {
    scene6Active = false;
    circuit_flick = true;
    digitalWrite(relay1, LOW);  // Turn the RELAY Off
    scene5Active = true;
    bombs = false;
    Display.setPixelColor(8, 0, 0, 0);    // Set the pixel color
    Display.setPixelColor(7, 0, 255, 0);  // Set the pixel color
    Display.show();
    startMillis = millis();  // Update the start time for scene 5
    Serial.println("Scene 5 Activated by SC2");
    lcd.setCursor(0, 1);
    lcd.print("sc5 travelling ");
    ambient_tracks[7] = true;


    machine.setPixelColor(1, 255, 255, 0);    // Set the pixel color
    machine.setPixelColor(2, 255, 255, 255);  // Set the pixel color
    machine.show();


    lcd.setCursor(0, 0);
    lcd.print("MACHINE: running");
    flickerSpeed = 10;
    time_flikr();
    console_flikr();
    machine.clear();
  }

  // Running Scene 5 water
  if (scene5Active) {
    unsigned long scene5ElapsedTime = millis() - startMillis;


    if (ambient_tracks[7]) {      // Note: Track 21 is at index 20 in a zero-based array
      mp3_ambient.play(8);        // travelling sound
      ambient_tracks[7] = false;  // Set to false to prevent re-playing
    }
    if (scene5ElapsedTime >= 0) {
      lcd.setCursor(0, 1);
      lcd.print("travel to water");

      flickerSpeed = 10;
      time_flikr();
    }


    // Add more steps as needed...

    // End Scene 5 after a duration
    if (scene5ElapsedTime >= 29500) {
      // Track 22 is at index 21 in a zero-based array


      scene5Active = false;  // Deactivate the scene
      Serial.println("Scene 5 Complete");
      istravelling = false;
      flickerSpeed = 2000;
      time_display.clear();
      five_ten();
      ambient_tracks[7] = true;
      lcd.setCursor(0, 1);
      lcd.print("sc5 water scene ");


      for (int i = 1; i <= 3; i++) {
        machine.setPixelColor(i, machine.Color(0, 0, 255));  // blue color
      }
      for (int i = 11; i <= 17; i++) {
        machine.setPixelColor(i, machine.Color(0, 0, 255));  // blue color
      }
      machine.show();



      //Start the waiting period for Scene 5
      scene5Waiting = true;
      startMillis = millis();  // Reset the timer for Scene 4 waiting period
      delay(3000);
      mp3_ambient.play(23);  // Play track 22 ("whales")
      delay(3000);
      mp3_machine.play(10);
    }

    //  if (scene5ElapsedTime >= 29500) {


    // }
  }


  // Scene 5 waiting period
  if (scene5Waiting && (millis() - startMillis >= 5000)) {  // Adjust waiting duration as needed
    scene5Waiting = false;

    lcd.setCursor(0, 0);
    lcd.print("sc5 waiting     ");
    Display.setPixelColor(5, 0, 255, 0);  // Set the pixel color
    Display.setPixelColor(7, 0, 0, 255);  // Set the pixel color
    Display.show();
  }




  // Scene 6: Activate with SC2 button
  if (!scene6Active && !digitalRead(SC3)) {
    digitalWrite(relay1, LOW);  // Turn the RELAY Off
    scene7Active = false;
    scene6Active = true;
    Display.setPixelColor(8, 0, 0, 0);    // Set the pixel color
    Display.setPixelColor(7, 0, 255, 0);  // Set the pixel color
    Display.show();
    machine.clear();
    machine.show();
    startMillis = millis();  // Update the start time for Scene 6
    Serial.println("Scene 6 Activated by SC3");
    lcd.setCursor(0, 1);
    lcd.print("sc6 travelling ");
    bombs = false;
    lcd.setCursor(0, 0);
    lcd.print("MACHINE: running");
    flickerSpeed = 10;
    time_flikr();
    console_flikr();

    // machine.clear();
  }

  // Running Scene 6 war
  if (scene6Active) {
    unsigned long Scene6ElapsedTime = millis() - startMillis;
    if (ambient_tracks[7]) {      // Note: Track 21 is at index 20 in a zero-based array
      mp3_ambient.play(8);        // travelling sound
      ambient_tracks[7] = false;  // Set to false to prevent re-playing
    }
    if (Scene6ElapsedTime >= 0) {
      lcd.setCursor(0, 1);
      lcd.print("travel to war    ");

      flickerSpeed = 10;
      time_flikr();
    }
    if (Scene6ElapsedTime >= 3000) {
      if (machine_tracks[9]) {      // Note: Track 21 is at index 20 in a zero-based array
        mp3_machine.play(9);        // lock fail
        machine_tracks[9] = false;  // Set to false to prevent re-playing
      }
      TIMER();
      machine.show();
    }
    if (Scene6ElapsedTime >= 8000) {


      if (machine_tracks[4]) {      // Note: Track 21 is at index 20 in a zero-based array
        mp3_machine.play(8);        // losing power
        machine_tracks[4] = false;  // Set to false to prevent re-playing
      }

      if (Scene6ElapsedTime >= 15000) {
        lcd.setCursor(0, 1);
        lcd.print("travel to war    ");

        circuit_flick = false;
        time_circuits.clear();
        time_circuits.show();
      }

      if (Scene6ElapsedTime >= 15500) {
      }

      if (Scene6ElapsedTime >= 16000) {

        if (ambient_tracks[11]) {      // Note: Track 21 is at index 20 in a zero-based array
          mp3_ambient.play(4);         // warning sound
          ambient_tracks[11] = false;  // Set to false to prevent re-playing
        }

        for (int i = 3; i <= 10; i++) {
          machine.setPixelColor(i, machine.Color(255, 0, 0));  // red color
          machine.show();
        }


        isshocking = true;
        scene6_1 = true;
        circuit_flick = true;

        lcd.setCursor(0, 1);
        lcd.print("shock scene        ");
        Serial.println("SHOCK SCENE");
        time_display.clear();
      }

      // End Scene 6 after a duration
      if (Scene6ElapsedTime >= 23000) {
        mp3_machine.play(17);

        isshocking = false;
        circuit_flick = true;
        scene6Active = false;  // Deactivate the scene
        scene6_1 = false;
        Serial.println("Scene 6 Complete");
        time_circuits.clear();
        time_circuits.show();
        flickerSpeed = 2000;

        time_display.clear();
        ninefourtwo();
        machine.clear();
        machine.show();
        bombs = true;
        // mp3_ambient.stop();
        if (ambient_tracks[2]) {      // Note: Track 21 is at index 20 in a zero-based array
          mp3_ambient.play(3);        // GUNS
          ambient_tracks[2] = false;  // Set to false to prevent re-playing
        }
        scene6 = true;
        lcd.setCursor(0, 1);
        lcd.print("sc6 war scene        ");
        //Start the waiting period for Scene 6
        scene6Waiting = true;
        machine_tracks[4] = true;
        ambient_tracks[7] = true;
        startMillis = millis();  // Reset the timer for Scene 4 waiting period
      }




      // Scene 6 waiting period
      if (scene6Waiting && (millis() - startMillis >= 5000)) {  // Adjust waiting duration as needed
        scene6Waiting = false;
        lcd.setCursor(0, 0);
        lcd.print("sc6 waiting     ");
        Display.setPixelColor(5, 0, 255, 0);  // Set the pixel color
        Display.setPixelColor(7, 0, 0, 255);  // Set the pixel color
        Display.show();
      }
    }
  }



  // Scene 7: Activate with SC4 button
  if (!scene7Active && !digitalRead(SC4)) {
    scene8Active = false;

    scene7Active = true;

    startMillis = millis();  // Set the initial start time for Scene 7
    Serial.println("Scene 7 Activated by SC4");
    candles();
    bombs = false;
    circuit_flick = true;


    flickerSpeed = 10;

    time_flikr();

    machine.clear();
    machine.show();
    lcd.setCursor(0, 0);
    lcd.print("MACHINE: running");
    lcd.setCursor(0, 1);
    lcd.print("sc7 travelling      ");
  }


  // Running Scene 7 with multiple steps
  if (scene7Active) {
    unsigned long scene7ElapsedTime = millis() - startMillis;

    if (ambient_tracks[7]) {      // Note: Track 21 is at index 20 in a zero-based array
      mp3_ambient.play(8);        // travelling sound
      ambient_tracks[7] = false;  // Set to false to prevent re-playing
    }
    // Step 1: Flicker for the first 5 seconds
    if (scene7ElapsedTime < 15000) {
      // candles();
      time_flikr();

    }

    // Step 2: After 5 seconds, display a message
    else if (scene7ElapsedTime < 15200) {
      if (machine_tracks[16]) {      // Note: Track 21 is at index 20 in a zero-based array
        mp3_machine.play(17);        // machine malfunction
        machine_tracks[16] = false;  // Set to false to prevent re-playing
      }
      lcd.setCursor(0, 1);
      lcd.print("police scene     ");
      // Additional actions for Step 2 here
      flickerSpeed = 200;
      mp3_ambient.play(1);
      time_circuits.clear();
      time_circuits.show();
      time_display.clear();
      oneeightfourtwo();

      //mp3 player here

    }

    // Step 3: Another action from 8280 seconds
    else if (scene7ElapsedTime < 35000) {
      scene7Active = false;  // Deactivate Scene 7
      scene7 = true;
      ambient_tracks[7] = true;
      scene7Waiting = true;
      Serial.println("Scene 7 Complete");
      startMillis = millis();
      Serial.println("sc7 waiting");

      // Reset startMillis for the waiting period
    }

    // End Scene 7 after 8280 Seconds seconds
    //  if (scene7ElapsedTime >= 82800) {


    //  }


    // Scene 7 waiting period after Scene 7 ends
    if (scene7Waiting && (millis() - startMillis >= 5000)) {  // Adjust waiting duration as needed
      scene7Waiting = false;

      //  lcd.setCursor(0, 0);
      // lcd.print("sc7 waiting     ");
      lcd.setCursor(0, 1);
      lcd.print("sc7 walking scene   ");
      lcd.setCursor(0, 0);
      lcd.print("sc7 waiting        ");
      Serial.println("sc7 waiting");
    }
  }


  // Scene 8: Activate with SC5 button
  if (!scene8Active && !digitalRead(SC5)) {
    Serial.println("Scene 8 Activated by SC5");
    //  glitchEffect();

    scene8Active = true;  // Set active to prevent multiple prints
    //candles();
    startMillis = millis();  // Set the initial start time for Scene 8

    lcd.setCursor(0, 1);
    lcd.print("pub scene        ");
    lcd.setCursor(0, 0);
    lcd.print("MACHINE: running");

    // Reset flags for flash messages
    flash1Printed = false;
    flash2Printed = false;
    flash3Printed = false;
    flash4Printed = false;
    flash5Printed = false;
    flash6Printed = false;
    flash7Printed = false;
    flash8Printed = false;
    flash9Printed = false;
  }



  // Running Scene 8 with multiple steps
  if (scene8Active) {
    unsigned long scene8ElapsedTime = millis() - startMillis;

    if (scene8ElapsedTime >= 50) {
      if (ambient_tracks[17]) {                   // Note: Track 21 is at index 20 in a zero-based array
        mp3_ambient.play(5);                      // travelling sound
        ambient_tracks[17] = false;               // Set to false to prevent re-playing
        machine.setPixelColor(0, 255, 255, 255);  // Set the pixel color as  relay example for flashes of lights
        machine.show();
        delay(1000);
        machine.setPixelColor(0, 0, 0, 0);  // Set the pixel color
        machine.show();
        pixels.clear();
        pixels.show();
      }


      if (scene8ElapsedTime >= 18000 && !flash1Printed) {
        lcd.setCursor(0, 1);
        lcd.print("flash 2        ");
        Serial.println("flash 2");                // Print flash 1 only once
        machine.setPixelColor(0, 255, 255, 255);  // Set the pixel color as  relay example for flashes of lights
        machine.show();
        delay(1000);
        machine.setPixelColor(0, 0, 0, 0);  // Set the pixel color
        machine.show();

        flash1Printed = true;  // Set flag to prevent repeat
      }

      if (scene8ElapsedTime >= 21500 && !flash2Printed) {
        lcd.setCursor(0, 1);
        lcd.print("flash 3       ");
        Serial.println("flash 3");                // Print flash 2 only once
        machine.setPixelColor(0, 255, 255, 255);  // Set the pixel color as  relay example for flashes of lights
        machine.show();
        delay(1000);
        machine.setPixelColor(0, 0, 0, 0);  // Set the pixel color
        machine.show();

        flash2Printed = true;  // Set flag to prevent repeat
      }

      if (scene8ElapsedTime >= 25000 && !flash3Printed) {
        lcd.setCursor(0, 1);
        lcd.print("flash 4        ");
        Serial.println("flash 4");                // Print flash 3 only once
        machine.setPixelColor(0, 255, 255, 255);  // Set the pixel color as  relay example for flashes of lights
        machine.show();
        delay(1000);
        machine.setPixelColor(0, 0, 0, 0);  // Set the pixel color
        machine.show();
        flash3Printed = true;  // Set flag to prevent repeat
      }


      if (scene8ElapsedTime >= 26500 && !flash4Printed) {
        lcd.setCursor(0, 1);
        lcd.print("flash 5        ");
        Serial.println("flash 5");                // Print flash 3 only once
        machine.setPixelColor(0, 255, 255, 255);  // Set the pixel color as  relay example for flashes of lights
        machine.show();
        delay(1000);
        machine.setPixelColor(0, 0, 0, 0);  // Set the pixel color
        machine.show();
        flash4Printed = true;  // Set flag to prevent repeat
      }

      if (scene8ElapsedTime >= 27500 && !flash5Printed) {
        lcd.setCursor(0, 1);
        lcd.print("flash 6        ");
        Serial.println("flash 6");                // Print flash 3 only once
        machine.setPixelColor(0, 255, 255, 255);  // Set the pixel color as  relay example for flashes of lights
        machine.show();
        delay(1000);
        machine.setPixelColor(0, 0, 0, 0);  // Set the pixel color
        machine.show();
        flash5Printed = true;  // Set flag to prevent repeat
      }

      if (scene8ElapsedTime >= 29000 && !flash6Printed) {
        lcd.setCursor(0, 1);
        lcd.print("flash 7       ");
        Serial.println("flash 7");                // Print flash 3 only once
        machine.setPixelColor(0, 255, 255, 255);  // Set the pixel color as  relay example for flashes of lights
        machine.show();
        delay(1000);
        machine.setPixelColor(0, 0, 0, 0);  // Set the pixel color
        machine.show();
        flash6Printed = true;  // Set flag to prevent repeat
      }

      if (scene8ElapsedTime >= 34000 && !flash7Printed) {
        lcd.setCursor(0, 1);
        lcd.print("flash 8        ");
        Serial.println("flash 8");                // Print flash 3 only once
        machine.setPixelColor(0, 255, 255, 255);  // Set the pixel color as  relay example for flashes of lights
        machine.show();
        delay(1000);
        machine.setPixelColor(0, 0, 0, 0);  // Set the pixel color
        machine.show();
        flash7Printed = true;  // Set flag to prevent repeat
      }
      if (scene8ElapsedTime >= 39000 && !flash8Printed) {
        lcd.setCursor(0, 1);
        lcd.print("flash 9        ");
        Serial.println("flash 9");                // Print flash 3 only once
        machine.setPixelColor(0, 255, 255, 255);  // Set the pixel color as  relay example for flashes of lights
        machine.show();
        delay(5000);
        machine.setPixelColor(0, 0, 0, 0);  // Set the pixel color
        machine.show();
        flash8Printed = true;  // Set flag to prevent repeat
        mp3_ambient.play(1);
      }
      if (scene8ElapsedTime >= 42000 && !flash8Printed) {
        lcd.setCursor(0, 1);
        lcd.print("flash 9        ");
        Serial.println("flash 9");                // Print flash 3 only once
        machine.setPixelColor(0, 255, 255, 255);  // Set the pixel color as  relay example for flashes of lights
        machine.show();
        delay(3000);
        machine.setPixelColor(0, 0, 0, 0);  // Set the pixel color
        machine.show();
        flash8Printed = true;  // Set flag to prevent repeat
        mp3_ambient.play(1);
      }

      // End Scene 8 after a duration
      if (scene8ElapsedTime >= 45000) {
        scene8Active = false;    // Deactivate Scene 8
        scene8Waiting = true;    // Start the waiting period
        startMillis = millis();  // Reset startMillis for the waiting period
      }
    }



    // Scene 8 waiting period after Scene 8 ends
    else if (scene8Waiting && (millis() - startMillis >= 5000)) {
      scene8Waiting = false;
      lcd.setCursor(0, 0);
      lcd.print("sc8 waiting     ");
      lcd.setCursor(0, 1);
      lcd.print("tension         ");
      Serial.println("Scene 8 Complete");
    }




    // Scene 9: Activate with SC6 button
    if (!scene9Active && !digitalRead(SC6)) {
      Serial.println("Scene 9 Activated by SC6");
      scene9Active = true;     // Set active to prevent multiple prints
      startMillis = millis();  // Set the initial start time for Scene 9

      lcd.setCursor(0, 1);
      lcd.print("home scene      ");
      lcd.setCursor(0, 0);
      lcd.print("MACHINE: running");

      // Reset flags for flash messages
      Printed1 = false;
      Printed2 = false;
      Printed3 = false;
      Printed4 = false;
      Printed5 = false;
      Printed6 = false;
      Printed7 = false;
      Printed8 = false;
      Printed9 = false;
    }

    // Running Scene 9 with multiple steps
    if (scene9Active) {
      unsigned long scene9ElapsedTime = millis() - startMillis;

      // First event at 50ms: Play ambient track and flash
      if (scene9ElapsedTime >= 50 && ambient_tracks[17]) {
        mp3_ambient.play(5);                      // Travelling sound
        ambient_tracks[17] = false;               // Prevent re-playing
        machine.setPixelColor(0, 255, 255, 255);  // Set pixel color for flash
        machine.show();
        delay(100);                         // Use short delay only if necessary
        machine.setPixelColor(0, 0, 0, 0);  // Turn off pixel after flash
        machine.show();
      }

      // Second event at 19000ms
      if (scene9ElapsedTime >= 19000 && !Printed1) {
        lcd.setCursor(0, 1);
        lcd.print("flash 2        ");
        Serial.println("flash 2");
        machine.setPixelColor(0, 255, 255, 255);  // Flash pixel color
        machine.show();
        delay(100);                         // Short delay for visual effect
        machine.setPixelColor(0, 0, 0, 0);  // Turn off pixel after flash
        machine.show();

        Printed1 = true;  // Set flag to prevent repeat
      }

      // End Scene 9 after 45000ms (45 seconds)
      if (scene9ElapsedTime >= 45000) {
        scene9Active = false;    // Deactivate Scene 9
        scene9Waiting = true;    // Start waiting period
        startMillis = millis();  // Reset startMillis for the waiting period
      }
    }

    // Scene 9 waiting period after Scene 9 ends
    if (scene9Waiting && (millis() - startMillis >= 5000)) {  // Adjust waiting duration as needed
      scene9Waiting = false;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("sc9 waiting     ");
      lcd.setCursor(0, 1);
      lcd.print("tension         ");
      Serial.println("Scene 9 Complete");
    }
  }
}
