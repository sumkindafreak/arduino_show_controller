#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>


// TFT Display Pins
#define TFT_CS 5
#define TFT_RST 4
#define TFT_DC 2
#define TFT_BL 32
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

// Rotary Encoder Pins (Now directly on ESP32)
#define ENCODER_CLK 34
#define ENCODER_DT 35
#define ENCODER_SW 33


bool menuChanged = true;
int selectedMenu = 0;
bool inSubMenu = false;

// Menu Options
const char* menuItems[] = { "Bluetooth Menu", "Show Menu", "WiFi Menu", "Settings", "Diagnostics" };
const int menuLength = sizeof(menuItems) / sizeof(menuItems[0]);

// Submenu Options
const char* settingsMenu[] = { "TFT Brightness", "Volume Control", "NeoPixel Brightness", "Back" };
const int settingsLength = sizeof(settingsMenu) / sizeof(settingsMenu[0]);
int selectedSetting = 0;

// TFT Brightness Variable
int tftBrightness = 128;  // Default brightness (0-255)


const char* bluetoothMenu[] = {"Toggle Bluetooth", "Connection Details", "Back"};
const int bluetoothLength = sizeof(bluetoothMenu) / sizeof(bluetoothMenu[0]);
int selectedBluetooth = 0;
bool inBluetoothMenu = false;
bool bluetoothEnabled = false;  // Default Bluetooth state


const char* showList[] = {"Show 1", "Show 2", "Show 3", "Back"};  // Renamed from showMenu[]
const int showListLength = sizeof(showList) / sizeof(showList[0]);
int selectedShow = 0;
bool inShowMenu = false;


const char* wifiMenu[] = {"Enter SSID", "Enter Password", "Connect to WiFi", "Back"};
const int wifiMenuLength = sizeof(wifiMenu) / sizeof(wifiMenu[0]);
int selectedWiFi = 0;
bool inWiFiMenu = false;

const char* diagnosticsMenu[] = {
    "Voltage Readings", 
    "Power Supply Status", 
    "Temperature Sensor", 
    "I/O Status", 
    "Run Self-Test",  // NEW OPTION
    "Back"
};
const int diagnosticsLength = sizeof(diagnosticsMenu) / sizeof(diagnosticsMenu[0]);
int selectedDiagnostics = 0;
bool inDiagnosticsMenu = false;

const char* selfTestSteps[] = {
    "Checking Relays...", 
    "Checking Buttons...", 
    "Checking NeoPixels...", 
    "Self-Test Completed"
};
const int selfTestStepsLength = sizeof(selfTestSteps) / sizeof(selfTestSteps[0]);

int currentSelfTestStep = 0;
bool inSelfTest = false;
bool selfTestChanged = true;
String selfTestResults[4] = {"", "", "", ""};  // Stores pass/fail results for 4 test steps



// Variables to store SSID and password
String wifiSSID = "Not Set";
String wifiPassword = "Not Set";
bool wifiConnected = false;



void displayMenu() {
    tft.fillScreen(ST77XX_BLACK); // Clear screen

    // Draw title bar background
    tft.fillRect(0, 0, tft.width(), 15, ST77XX_BLUE);

    // Set dynamic title
    String title;
    if (inDiagnosticsMenu) {
        title = "Diagnostics";
    } else if (inWiFiMenu) {
        title = "WiFi Menu";
    } else if (inShowMenu) {
        title = "Show Menu";
    } else if (inBluetoothMenu) {
        title = "Bluetooth Menu";
    } else if (inSubMenu) {
        title = "Settings";
    } else {
        title = "Main Menu";
    }

    // Center Title
    int16_t x1, y1;
    uint16_t w, h;
    tft.getTextBounds(title, 0, 0, &x1, &y1, &w, &h);
    int centerX = (tft.width() - w) / 2;
    tft.setCursor(centerX, 4);
    tft.setTextColor(ST77XX_WHITE);
    tft.setTextSize(1);
    tft.print(title);

    // Draw menu items
    const char** currentMenu;
    int menuSize, selectedItem;
    
    if (inDiagnosticsMenu) {
        currentMenu = diagnosticsMenu;
        menuSize = diagnosticsLength;
        selectedItem = selectedDiagnostics;
    } else if (inWiFiMenu) {
        currentMenu = wifiMenu;
        menuSize = wifiMenuLength;
        selectedItem = selectedWiFi;
    } else if (inShowMenu) {
        currentMenu = showList;
        menuSize = showListLength;
        selectedItem = selectedShow;
    } else if (inBluetoothMenu) {
        currentMenu = bluetoothMenu;
        menuSize = bluetoothLength;
        selectedItem = selectedBluetooth;
    } else if (inSubMenu) {
        currentMenu = settingsMenu;
        menuSize = settingsLength;
        selectedItem = selectedSetting;
    } else {
        currentMenu = menuItems;
        menuSize = menuLength;
        selectedItem = selectedMenu;
    }

    for (int i = 0; i < menuSize; i++) {
        if (i == selectedItem) {
            tft.setTextColor(ST77XX_GREEN);  // Highlight selected item
        } else {
            tft.setTextColor(ST77XX_WHITE);
        }
        tft.setCursor(10, 20 + (i * 10));
        tft.print(currentMenu[i]);
    }
}


void executeMenuAction(int option) {
    switch (option) {
        case 0:  // Open Bluetooth Menu
            inBluetoothMenu = true;
            selectedBluetooth = 0;
            menuChanged = true;
            break;

        case 1:  // Open Show Menu
            inShowMenu = true;
            selectedShow = 0;
            menuChanged = true;
            break;

        case 2:  // Open WiFi Menu
            inWiFiMenu = true;
            selectedWiFi = 0;
            menuChanged = true;
            break;

        case 3:  // Open Settings Menu
            inSubMenu = true;
            selectedSetting = 0;
            menuChanged = true;
            break;

         case 4:  // Open Diagnostics Menu
            inDiagnosticsMenu = true;
            selectedDiagnostics = 0;
            menuChanged = true;
            break;
    }
}


void executeSettingsAction(int option) {
  Serial2.println("BUZZ");  // Send buzz command to Mega
  switch (option) {
    case 0: adjustTFTBrightness(); break;
    case 1: adjustVolume(); break;
    case 2: adjustNeoPixelBrightness(); break;
    case 3:
      inSubMenu = false;
      menuChanged = true;
      break;
  }
}

void toggleBluetooth() {
  Serial.println("Toggling Bluetooth...");
}

void showMenu() {
  Serial.println("Future expansion: Load shows from SD card");
}

void connectWiFi() {
  Serial.println("Connecting to WiFi...");
}

void adjustTFTBrightness() {
  Serial.println("Adjusting TFT brightness...");
  tftBrightness = (tftBrightness + 50) % 256;
  analogWrite(TFT_BL, tftBrightness);
}

void adjustVolume() {
  Serial.println("Adjusting volume...");
}

void adjustNeoPixelBrightness() {
  Serial.println("Adjusting NeoPixel brightness...");
}

void runDiagnostics() {
  Serial.println("Running system diagnostics...");
}


void showLoadingScreen() {
  tft.fillScreen(ST77XX_BLACK);

  // Centered Title
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(2);
  int titleX = (tft.width() - (9 * 12)) / 2;  // Approx. width of "SHOWDUINO"
  tft.setCursor(titleX, 50);
  tft.print("SHOWDUINO");

  // System Version
  tft.setTextSize(1);
  int versionX = (tft.width() - (10 * 6)) / 2;  // Approx. width of "SYSTEM v1.0"
  tft.setCursor(versionX, 80);
  tft.print("SYSTEM v1.0");

  // Loading Text
  tft.setCursor((tft.width() - (7 * 6)) / 2, 120);  // "LOADING" centered
  tft.print("LOADING");

  // Animated Dots + Progress Bar
  for (int i = 0; i < 4; i++) {
    tft.setCursor((tft.width() / 2) + (i * 6), 120);
    tft.print(".");
    delay(500);
  }

  // Progress Bar
  int barX = 30;
  int barY = 150;
  int barWidth = tft.width() - 60;
  int barHeight = 8;

  tft.drawRect(barX, barY, barWidth, barHeight, ST77XX_WHITE);  // Outline

  for (int i = 0; i <= barWidth - 2; i += 6) {
    tft.fillRect(barX + 1, barY + 1, i, barHeight - 2, ST77XX_GREEN);
    delay(50);
  }

  delay(1000);  // Hold before entering menu
}

void executeBluetoothAction(int option) {
    switch (option) {
        case 0:  // Toggle Bluetooth
            bluetoothEnabled = !bluetoothEnabled;
            Serial.print("Bluetooth ");
            Serial.println(bluetoothEnabled ? "Enabled" : "Disabled");
            break;

        case 1:  // Show Bluetooth Connection Details
            Serial.println("Bluetooth Module: HC-05");
            Serial.println("Connection Code: 1234");
            break;

        case 2:  // Back to Main Menu
            inBluetoothMenu = false;
            menuChanged = true;
            break;
    }
}

void executeWiFiAction(int option) {
    switch (option) {
        case 0:  // Enter SSID
            Serial.println("Entering SSID...");
            wifiSSID = "MyNetwork";  // Placeholder - Replace with input method
            break;

        case 1:  // Enter Password
            Serial.println("Entering WiFi Password...");
            wifiPassword = "MyPassword";  // Placeholder - Replace with input method
            break;

        case 2:  // Connect to WiFi
            Serial.print("Connecting to SSID: ");
            Serial.print(wifiSSID);
            Serial.print(" with password: ");
            Serial.println(wifiPassword);
            wifiConnected = true; // Placeholder - Replace with actual connection logic
            break;

        case 3:  // Back to Main Menu
            inWiFiMenu = false;
            menuChanged = true;
            break;
    }
}
void executeShowAction(int option) {
    switch (option) {
        case 0:
            Serial.println("Loading Show 1...");
            break;
        case 1:
            Serial.println("Loading Show 2...");
            break;
        case 2:
            Serial.println("Loading Show 3...");
            break;
        case 3:  // Back to Main Menu
            inShowMenu = false;
            menuChanged = true;
            break;
    }
}
void executeDiagnosticsAction(int option) {
    tft.fillScreen(ST77XX_BLACK);
    tft.setCursor(10, 10);
    tft.setTextSize(1);
    tft.setTextColor(ST77XX_WHITE);

    switch (option) {
        case 0:  // Voltage Readings
            Serial.println("🔋 Requesting Voltage Readings...");
            Serial2.println("REQUEST_DIAGNOSTICS");  
            delay(200);
            readMegaDiagnostics();
            break;

        case 1:  // Power Supply Status
            Serial.println("🔌 Requesting Power Status...");
            Serial2.println("REQUEST_PWR_STATUS");
            delay(200);
            readMegaDiagnostics();
            break;

        case 2:  // Temperature Sensor
            Serial.println("🌡️ Requesting Temperature...");
            Serial2.println("REQUEST_TEMP");
            delay(200);
            readMegaDiagnostics();
            break;

        case 3:  // I/O Status
            Serial.println("📡 Checking I/O Status...");
            Serial2.println("REQUEST_IO_STATUS");
            delay(200);
            readMegaDiagnostics();
            break;

        case 4:  // Run Self-Test
            Serial.println("🔧 Starting Self-Test...");
            inSelfTest = true;
            currentSelfTestStep = 0;
            selfTestChanged = true;
            break;

        case 5:  // Back to Main Menu
            Serial.println("Returning to Main Menu...");
            inDiagnosticsMenu = false;  // ✅ Exit Diagnostics Menu
            selectedMenu = 0;           // ✅ Reset to first item in Main Menu
            menuChanged = true;         // ✅ Force screen update
            break;
    }
}

void readMegaDiagnostics() {
    tft.fillScreen(ST77XX_BLACK);
    tft.setCursor(10, 10);
    tft.setTextSize(1);
    tft.setTextColor(ST77XX_WHITE);
    tft.println("📊 Voltage Readings:");

    while (Serial2.available()) {
        String receivedData = Serial2.readStringUntil('\n');
        receivedData.trim();
        Serial.println("Received from Mega: " + receivedData);

        tft.setCursor(10, tft.getCursorY() + 10);
        tft.println(receivedData);
    }
}
void displaySelfTest() {
    tft.fillScreen(ST77XX_BLACK);
    tft.setCursor(10, 10);
    tft.setTextSize(1);
    tft.setTextColor(ST77XX_WHITE);

    if (currentSelfTestStep >= selfTestStepsLength) {
        tft.println("✅ Self-Test Completed!");
        delay(1500);
        inSelfTest = false;
        inDiagnosticsMenu = true;
        menuChanged = true;
        return;
    }

    tft.print("Step: ");
    tft.print(currentSelfTestStep + 1);
    tft.print(" / ");
    tft.println(selfTestStepsLength);

    tft.setCursor(10, 30);
    tft.println(selfTestSteps[currentSelfTestStep]);

    // Display PASS/FAIL result for previous step
    if (currentSelfTestStep > 0) {
        tft.setCursor(10, 50);
        tft.print("Last Test: ");
        tft.setTextColor(selfTestResults[currentSelfTestStep - 1] == "PASS" ? ST77XX_GREEN : ST77XX_RED);
        tft.println(selfTestResults[currentSelfTestStep - 1]);
        tft.setTextColor(ST77XX_WHITE);  // Reset text color
    }
}





String readMegaSelfTestResult() {
    String result = "UNKNOWN";
    unsigned long timeout = millis() + 2000;  // 2-second timeout

    while (millis() < timeout) {
        if (Serial2.available()) {  // Read from Mega
            String receivedData = Serial2.readStringUntil('\n');
            receivedData.trim();
            Serial.println("Received from Mega: " + receivedData);

            if (receivedData == "PASS" || receivedData == "FAIL") {
                result = receivedData;
                break;
            }
        }
    }
    return result;
}









void setup() {


  Serial.begin(115200);                     // Debugging output to Serial Monitor
  Serial2.begin(9600, SERIAL_8N1, 27, 26);  // ESP32 TX (26) → Mega RX1 (19), ESP32 RX (27) ← Mega TX1 (18)


  // Initialize Rotary Encoder Pins
  pinMode(ENCODER_CLK, INPUT_PULLUP);
  pinMode(ENCODER_DT, INPUT_PULLUP);
  pinMode(ENCODER_SW, INPUT_PULLUP);

  // Initialize TFT
  tft.initR(INITR_BLACKTAB);
  tft.setRotation(4);
  tft.setTextSize(1);
  tft.fillScreen(ST77XX_BLACK);
  pinMode(TFT_BL, OUTPUT);
  analogWrite(TFT_BL, tftBrightness);
  showLoadingScreen();
  Serial.println("Drawing Menu...");
  displayMenu();
}



int lastCLK = digitalRead(ENCODER_CLK);  // Track last encoder state
void loop() {
    int currentCLK = digitalRead(ENCODER_CLK);
    int dtState = digitalRead(ENCODER_DT);

    // Detect Rotation
    if (currentCLK != lastCLK) {  
        if (dtState != currentCLK) {  // Clockwise Rotation
            Serial.println("Rotated CLOCKWISE");
            if (inDiagnosticsMenu) {
                selectedDiagnostics = (selectedDiagnostics + 1) % diagnosticsLength;
            } else if (inWiFiMenu) {
                selectedWiFi = (selectedWiFi + 1) % wifiMenuLength;
            } else if (inShowMenu) {
                selectedShow = (selectedShow + 1) % showListLength;
            } else if (inBluetoothMenu) {
                selectedBluetooth = (selectedBluetooth + 1) % bluetoothLength;
            } else if (inSubMenu) {
                selectedSetting = (selectedSetting + 1) % settingsLength;
            } else if (inSelfTest) {
                // Prevent rotation from affecting self-test steps
                Serial.println("Self-Test in Progress - Rotation Ignored");
            } else {
                selectedMenu = (selectedMenu + 1) % menuLength;
            }
        } else {  // Counterclockwise Rotation
            Serial.println("Rotated COUNTERCLOCKWISE");
            if (inDiagnosticsMenu) {
                selectedDiagnostics = (selectedDiagnostics - 1 + diagnosticsLength) % diagnosticsLength;
            } else if (inWiFiMenu) {
                selectedWiFi = (selectedWiFi - 1 + wifiMenuLength) % wifiMenuLength;
            } else if (inShowMenu) {
                selectedShow = (selectedShow - 1 + showListLength) % showListLength;
            } else if (inBluetoothMenu) {
                selectedBluetooth = (selectedBluetooth - 1 + bluetoothLength) % bluetoothLength;
            } else if (inSubMenu) {
                selectedSetting = (selectedSetting - 1 + settingsLength) % settingsLength;
            } else if (inSelfTest) {
                // Prevent rotation from affecting self-test steps
                Serial.println("Self-Test in Progress - Rotation Ignored");
            } else {
                selectedMenu = (selectedMenu - 1 + menuLength) % menuLength;
            }
        }
        menuChanged = true;
    }

    lastCLK = currentCLK;  // Update last encoder state

 // 🚀 Handle Self-Test Step Progression 🚀
    if (inSelfTest && digitalRead(ENCODER_SW) == LOW) {
        delay(300);  

        Serial.println("🔧 Advancing Self-Test Step...");
        Serial2.println("SELF_TEST_STEP_" + String(currentSelfTestStep));  

        // Read pass/fail response
        String result = readMegaSelfTestResult();
        selfTestResults[currentSelfTestStep] = result;

        selfTestChanged = true;
        currentSelfTestStep++;

        if (currentSelfTestStep >= selfTestStepsLength) {
            Serial.println("✅ Self-Test Completed!");
            inSelfTest = false;
            inDiagnosticsMenu = true;
            menuChanged = true;
        }
    }

    // Check button press (Encoder Click)
    if (!inSelfTest && digitalRead(ENCODER_SW) == LOW) {
        Serial.println("Encoder Button Pressed!");
        delay(300);  // Simple debounce

        if (inDiagnosticsMenu) {
            executeDiagnosticsAction(selectedDiagnostics);
        } else if (inWiFiMenu) {
            executeWiFiAction(selectedWiFi);
        } else if (inShowMenu) {
            executeShowAction(selectedShow);
        } else if (inBluetoothMenu) {
            executeBluetoothAction(selectedBluetooth);
        } else if (inSubMenu) {
            executeSettingsAction(selectedSetting);
        } else {
            executeMenuAction(selectedMenu);
        }
    }

    // Update Self-Test Display
    if (selfTestChanged) {
        displaySelfTest();
        selfTestChanged = false;
    }

    // Update menu display when selection changes
    if (menuChanged) {
        displayMenu();
        menuChanged = false;
    }
}


